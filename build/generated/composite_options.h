/*
 * This file is autogenerated with bcop:
 * The Compiz option code generator
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 */

#ifndef _COMPOSITE_OPTIONS_H
#define _COMPOSITE_OPTIONS_H

#include <core/core.h>

class CompositeOptions : public CompOption::Class {
    public:
        enum Options {
            SlowAnimationsKey,
            DetectRefreshRate,
            RefreshRate,
            UnredirectFullscreenWindows,
            UnredirectMatch,
            ForceIndependentOutputPainting,
            OptionNum
        };

        typedef boost::function <void (CompOption *opt, Options num)> ChangeNotify;

        CompositeOptions (bool init = true);
        virtual ~CompositeOptions ();

	void initOptions ();

        virtual CompOption::Vector & getOptions ();
        virtual bool setOption (const CompString &name, CompOption::Value &value);

        CompAction & optionGetSlowAnimationsKey ();
        void optionSetSlowAnimationsKeyInitiate (CompAction::CallBack init);
        void optionSetSlowAnimationsKeyTerminate (CompAction::CallBack term);
        void optionSetSlowAnimationsKeyNotify (ChangeNotify notify);

        bool optionGetDetectRefreshRate ();
        void optionSetDetectRefreshRateNotify (ChangeNotify notify);

        int optionGetRefreshRate ();
        void optionSetRefreshRateNotify (ChangeNotify notify);

        bool optionGetUnredirectFullscreenWindows ();
        void optionSetUnredirectFullscreenWindowsNotify (ChangeNotify notify);

        CompMatch & optionGetUnredirectMatch ();
        void optionSetUnredirectMatchNotify (ChangeNotify notify);

        bool optionGetForceIndependentOutputPainting ();
        void optionSetForceIndependentOutputPaintingNotify (ChangeNotify notify);


    protected:
        CompOption::Vector mOptions;

    private:
        std::vector<ChangeNotify> mNotify;

};


inline CompAction &
CompositeOptions::optionGetSlowAnimationsKey ()
{
    return mOptions[CompositeOptions::SlowAnimationsKey].value ().action ();
}

inline void
CompositeOptions::optionSetSlowAnimationsKeyInitiate (CompAction::CallBack init)
{
    mOptions[CompositeOptions::SlowAnimationsKey].value ().action ().setInitiate (init);
}

inline void
CompositeOptions::optionSetSlowAnimationsKeyTerminate (CompAction::CallBack term)
{
    mOptions[CompositeOptions::SlowAnimationsKey].value ().action ().setTerminate (term);
}

inline void
CompositeOptions::optionSetSlowAnimationsKeyNotify (CompositeOptions::ChangeNotify notify)
{
    mNotify[CompositeOptions::SlowAnimationsKey] = notify;
}

inline bool
CompositeOptions::optionGetDetectRefreshRate ()
{
    return mOptions[CompositeOptions::DetectRefreshRate].value ().b ();
}

inline void
CompositeOptions::optionSetDetectRefreshRateNotify (CompositeOptions::ChangeNotify notify)
{
    mNotify[CompositeOptions::DetectRefreshRate] = notify;
}

inline int
CompositeOptions::optionGetRefreshRate ()
{
    return mOptions[CompositeOptions::RefreshRate].value ().i ();
}

inline void
CompositeOptions::optionSetRefreshRateNotify (CompositeOptions::ChangeNotify notify)
{
    mNotify[CompositeOptions::RefreshRate] = notify;
}

inline bool
CompositeOptions::optionGetUnredirectFullscreenWindows ()
{
    return mOptions[CompositeOptions::UnredirectFullscreenWindows].value ().b ();
}

inline void
CompositeOptions::optionSetUnredirectFullscreenWindowsNotify (CompositeOptions::ChangeNotify notify)
{
    mNotify[CompositeOptions::UnredirectFullscreenWindows] = notify;
}

inline CompMatch &
CompositeOptions::optionGetUnredirectMatch ()
{
    return mOptions[CompositeOptions::UnredirectMatch].value ().match ();
}

inline void
CompositeOptions::optionSetUnredirectMatchNotify (CompositeOptions::ChangeNotify notify)
{
    mNotify[CompositeOptions::UnredirectMatch] = notify;
}

inline bool
CompositeOptions::optionGetForceIndependentOutputPainting ()
{
    return mOptions[CompositeOptions::ForceIndependentOutputPainting].value ().b ();
}

inline void
CompositeOptions::optionSetForceIndependentOutputPaintingNotify (CompositeOptions::ChangeNotify notify)
{
    mNotify[CompositeOptions::ForceIndependentOutputPainting] = notify;
}



#endif
