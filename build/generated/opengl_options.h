/*
 * This file is autogenerated with bcop:
 * The Compiz option code generator
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 */

#ifndef _OPENGL_OPTIONS_H
#define _OPENGL_OPTIONS_H

#include <core/core.h>

class OpenglOptions : public CompOption::Class {
    public:
        enum Options {
            TextureFilter,
            Lighting,
            SyncToVblank,
            TextureCompression,
            FramebufferObject,
            VertexBufferObject,
            AlwaysSwapBuffers,
            UnredirectDriverBlacklist,
            EnableX11Sync,
            X11SyncBlacklistVendor,
            X11SyncBlacklistModel,
            OptionNum
        };

        enum TextureFilter {
            TextureFilterFast = 0,
            TextureFilterGood = 1,
            TextureFilterBest = 2,
        };

        typedef boost::function <void (CompOption *opt, Options num)> ChangeNotify;

        OpenglOptions (bool init = true);
        virtual ~OpenglOptions ();

	void initOptions ();

        virtual CompOption::Vector & getOptions ();
        virtual bool setOption (const CompString &name, CompOption::Value &value);

        int optionGetTextureFilter ();
        void optionSetTextureFilterNotify (ChangeNotify notify);

        bool optionGetLighting ();
        void optionSetLightingNotify (ChangeNotify notify);

        bool optionGetSyncToVblank ();
        void optionSetSyncToVblankNotify (ChangeNotify notify);

        bool optionGetTextureCompression ();
        void optionSetTextureCompressionNotify (ChangeNotify notify);

        bool optionGetFramebufferObject ();
        void optionSetFramebufferObjectNotify (ChangeNotify notify);

        bool optionGetVertexBufferObject ();
        void optionSetVertexBufferObjectNotify (ChangeNotify notify);

        bool optionGetAlwaysSwapBuffers ();
        void optionSetAlwaysSwapBuffersNotify (ChangeNotify notify);

        CompString optionGetUnredirectDriverBlacklist ();
        void optionSetUnredirectDriverBlacklistNotify (ChangeNotify notify);

        bool optionGetEnableX11Sync ();
        void optionSetEnableX11SyncNotify (ChangeNotify notify);

        CompOption::Value::Vector & optionGetX11SyncBlacklistVendor ();
        void optionSetX11SyncBlacklistVendorNotify (ChangeNotify notify);

        CompOption::Value::Vector & optionGetX11SyncBlacklistModel ();
        void optionSetX11SyncBlacklistModelNotify (ChangeNotify notify);


    protected:
        CompOption::Vector mOptions;

    private:
        std::vector<ChangeNotify> mNotify;

};


inline int
OpenglOptions::optionGetTextureFilter ()
{
    return mOptions[OpenglOptions::TextureFilter].value ().i ();
}

inline void
OpenglOptions::optionSetTextureFilterNotify (OpenglOptions::ChangeNotify notify)
{
    mNotify[OpenglOptions::TextureFilter] = notify;
}

inline bool
OpenglOptions::optionGetLighting ()
{
    return mOptions[OpenglOptions::Lighting].value ().b ();
}

inline void
OpenglOptions::optionSetLightingNotify (OpenglOptions::ChangeNotify notify)
{
    mNotify[OpenglOptions::Lighting] = notify;
}

inline bool
OpenglOptions::optionGetSyncToVblank ()
{
    return mOptions[OpenglOptions::SyncToVblank].value ().b ();
}

inline void
OpenglOptions::optionSetSyncToVblankNotify (OpenglOptions::ChangeNotify notify)
{
    mNotify[OpenglOptions::SyncToVblank] = notify;
}

inline bool
OpenglOptions::optionGetTextureCompression ()
{
    return mOptions[OpenglOptions::TextureCompression].value ().b ();
}

inline void
OpenglOptions::optionSetTextureCompressionNotify (OpenglOptions::ChangeNotify notify)
{
    mNotify[OpenglOptions::TextureCompression] = notify;
}

inline bool
OpenglOptions::optionGetFramebufferObject ()
{
    return mOptions[OpenglOptions::FramebufferObject].value ().b ();
}

inline void
OpenglOptions::optionSetFramebufferObjectNotify (OpenglOptions::ChangeNotify notify)
{
    mNotify[OpenglOptions::FramebufferObject] = notify;
}

inline bool
OpenglOptions::optionGetVertexBufferObject ()
{
    return mOptions[OpenglOptions::VertexBufferObject].value ().b ();
}

inline void
OpenglOptions::optionSetVertexBufferObjectNotify (OpenglOptions::ChangeNotify notify)
{
    mNotify[OpenglOptions::VertexBufferObject] = notify;
}

inline bool
OpenglOptions::optionGetAlwaysSwapBuffers ()
{
    return mOptions[OpenglOptions::AlwaysSwapBuffers].value ().b ();
}

inline void
OpenglOptions::optionSetAlwaysSwapBuffersNotify (OpenglOptions::ChangeNotify notify)
{
    mNotify[OpenglOptions::AlwaysSwapBuffers] = notify;
}

inline CompString
OpenglOptions::optionGetUnredirectDriverBlacklist ()
{
    return mOptions[OpenglOptions::UnredirectDriverBlacklist].value ().s ();
}

inline void
OpenglOptions::optionSetUnredirectDriverBlacklistNotify (OpenglOptions::ChangeNotify notify)
{
    mNotify[OpenglOptions::UnredirectDriverBlacklist] = notify;
}

inline bool
OpenglOptions::optionGetEnableX11Sync ()
{
    return mOptions[OpenglOptions::EnableX11Sync].value ().b ();
}

inline void
OpenglOptions::optionSetEnableX11SyncNotify (OpenglOptions::ChangeNotify notify)
{
    mNotify[OpenglOptions::EnableX11Sync] = notify;
}

inline CompOption::Value::Vector &
OpenglOptions::optionGetX11SyncBlacklistVendor ()
{
    return mOptions[OpenglOptions::X11SyncBlacklistVendor].value ().list ();
}

inline void
OpenglOptions::optionSetX11SyncBlacklistVendorNotify (OpenglOptions::ChangeNotify notify)
{
    mNotify[OpenglOptions::X11SyncBlacklistVendor] = notify;
}

inline CompOption::Value::Vector &
OpenglOptions::optionGetX11SyncBlacklistModel ()
{
    return mOptions[OpenglOptions::X11SyncBlacklistModel].value ().list ();
}

inline void
OpenglOptions::optionSetX11SyncBlacklistModelNotify (OpenglOptions::ChangeNotify notify)
{
    mNotify[OpenglOptions::X11SyncBlacklistModel] = notify;
}



#endif
