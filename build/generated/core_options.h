/*
 * This file is autogenerated with bcop:
 * The Compiz option code generator
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 */

#ifndef _CORE_OPTIONS_H
#define _CORE_OPTIONS_H

#include <core/core.h>

class CoreOptions : public CompOption::Class {
    public:
        enum Options {
            ActivePlugins,
            AudibleBell,
            IgnoreHintsWhenMaximized,
            HideSkipTaskbarWindows,
            EdgeDelay,
            PingDelay,
            DefaultIcon,
            DoSerialize,
            OverlappingOutputs,
            DetectOutputs,
            Outputs,
            ClickToFocus,
            RaiseOnClick,
            Autoraise,
            AutoraiseDelay,
            FocusDesktop,
            FocusPreventionLevel,
            FocusPreventionMatch,
            CloseWindowKey,
            CloseWindowButton,
            RaiseWindowKey,
            RaiseWindowButton,
            LowerWindowKey,
            LowerWindowButton,
            MinimizeWindowKey,
            MinimizeWindowButton,
            MaximizeWindowKey,
            UnmaximizeWindowKey,
            UnmaximizeOrMinimizeWindowKey,
            MaximizeWindowHorizontallyKey,
            MaximizeWindowVerticallyKey,
            WindowMenuKey,
            WindowMenuButton,
            ShowDesktopKey,
            ShowDesktopEdge,
            ToggleWindowMaximizedKey,
            ToggleWindowMaximizedButton,
            ToggleWindowMaximizedHorizontallyKey,
            ToggleWindowMaximizedVerticallyKey,
            ToggleWindowShadedKey,
            Hsize,
            Vsize,
            OptionNum
        };

        enum OverlappingOutputs {
            OverlappingOutputsSmartMode = 0,
            OverlappingOutputsPreferLargerOutput = 1,
            OverlappingOutputsPreferSmallerOutput = 2,
        };

        enum FocusPreventionLevel {
            FocusPreventionLevelOff = 0,
            FocusPreventionLevelLow = 1,
            FocusPreventionLevelNormal = 2,
            FocusPreventionLevelHigh = 3,
            FocusPreventionLevelVeryHigh = 4,
        };

        typedef boost::function <void (CompOption *opt, Options num)> ChangeNotify;

        CoreOptions (bool init = true);
        virtual ~CoreOptions ();

	void initOptions ();

        virtual CompOption::Vector & getOptions ();
        virtual bool setOption (const CompString &name, CompOption::Value &value);

        CompOption::Value::Vector & optionGetActivePlugins ();
        void optionSetActivePluginsNotify (ChangeNotify notify);

        bool optionGetAudibleBell ();
        void optionSetAudibleBellNotify (ChangeNotify notify);

        bool optionGetIgnoreHintsWhenMaximized ();
        void optionSetIgnoreHintsWhenMaximizedNotify (ChangeNotify notify);

        bool optionGetHideSkipTaskbarWindows ();
        void optionSetHideSkipTaskbarWindowsNotify (ChangeNotify notify);

        int optionGetEdgeDelay ();
        void optionSetEdgeDelayNotify (ChangeNotify notify);

        int optionGetPingDelay ();
        void optionSetPingDelayNotify (ChangeNotify notify);

        CompString optionGetDefaultIcon ();
        void optionSetDefaultIconNotify (ChangeNotify notify);

        bool optionGetDoSerialize ();
        void optionSetDoSerializeNotify (ChangeNotify notify);

        int optionGetOverlappingOutputs ();
        void optionSetOverlappingOutputsNotify (ChangeNotify notify);

        bool optionGetDetectOutputs ();
        void optionSetDetectOutputsNotify (ChangeNotify notify);

        CompOption::Value::Vector & optionGetOutputs ();
        void optionSetOutputsNotify (ChangeNotify notify);

        bool optionGetClickToFocus ();
        void optionSetClickToFocusNotify (ChangeNotify notify);

        bool optionGetRaiseOnClick ();
        void optionSetRaiseOnClickNotify (ChangeNotify notify);

        bool optionGetAutoraise ();
        void optionSetAutoraiseNotify (ChangeNotify notify);

        int optionGetAutoraiseDelay ();
        void optionSetAutoraiseDelayNotify (ChangeNotify notify);

        bool optionGetFocusDesktop ();
        void optionSetFocusDesktopNotify (ChangeNotify notify);

        int optionGetFocusPreventionLevel ();
        void optionSetFocusPreventionLevelNotify (ChangeNotify notify);

        CompMatch & optionGetFocusPreventionMatch ();
        void optionSetFocusPreventionMatchNotify (ChangeNotify notify);

        CompAction & optionGetCloseWindowKey ();
        void optionSetCloseWindowKeyInitiate (CompAction::CallBack init);
        void optionSetCloseWindowKeyTerminate (CompAction::CallBack term);
        void optionSetCloseWindowKeyNotify (ChangeNotify notify);

        CompAction & optionGetCloseWindowButton ();
        void optionSetCloseWindowButtonInitiate (CompAction::CallBack init);
        void optionSetCloseWindowButtonTerminate (CompAction::CallBack term);
        void optionSetCloseWindowButtonNotify (ChangeNotify notify);

        CompAction & optionGetRaiseWindowKey ();
        void optionSetRaiseWindowKeyInitiate (CompAction::CallBack init);
        void optionSetRaiseWindowKeyTerminate (CompAction::CallBack term);
        void optionSetRaiseWindowKeyNotify (ChangeNotify notify);

        CompAction & optionGetRaiseWindowButton ();
        void optionSetRaiseWindowButtonInitiate (CompAction::CallBack init);
        void optionSetRaiseWindowButtonTerminate (CompAction::CallBack term);
        void optionSetRaiseWindowButtonNotify (ChangeNotify notify);

        CompAction & optionGetLowerWindowKey ();
        void optionSetLowerWindowKeyInitiate (CompAction::CallBack init);
        void optionSetLowerWindowKeyTerminate (CompAction::CallBack term);
        void optionSetLowerWindowKeyNotify (ChangeNotify notify);

        CompAction & optionGetLowerWindowButton ();
        void optionSetLowerWindowButtonInitiate (CompAction::CallBack init);
        void optionSetLowerWindowButtonTerminate (CompAction::CallBack term);
        void optionSetLowerWindowButtonNotify (ChangeNotify notify);

        CompAction & optionGetMinimizeWindowKey ();
        void optionSetMinimizeWindowKeyInitiate (CompAction::CallBack init);
        void optionSetMinimizeWindowKeyTerminate (CompAction::CallBack term);
        void optionSetMinimizeWindowKeyNotify (ChangeNotify notify);

        CompAction & optionGetMinimizeWindowButton ();
        void optionSetMinimizeWindowButtonInitiate (CompAction::CallBack init);
        void optionSetMinimizeWindowButtonTerminate (CompAction::CallBack term);
        void optionSetMinimizeWindowButtonNotify (ChangeNotify notify);

        CompAction & optionGetMaximizeWindowKey ();
        void optionSetMaximizeWindowKeyInitiate (CompAction::CallBack init);
        void optionSetMaximizeWindowKeyTerminate (CompAction::CallBack term);
        void optionSetMaximizeWindowKeyNotify (ChangeNotify notify);

        CompAction & optionGetUnmaximizeWindowKey ();
        void optionSetUnmaximizeWindowKeyInitiate (CompAction::CallBack init);
        void optionSetUnmaximizeWindowKeyTerminate (CompAction::CallBack term);
        void optionSetUnmaximizeWindowKeyNotify (ChangeNotify notify);

        CompAction & optionGetUnmaximizeOrMinimizeWindowKey ();
        void optionSetUnmaximizeOrMinimizeWindowKeyInitiate (CompAction::CallBack init);
        void optionSetUnmaximizeOrMinimizeWindowKeyTerminate (CompAction::CallBack term);
        void optionSetUnmaximizeOrMinimizeWindowKeyNotify (ChangeNotify notify);

        CompAction & optionGetMaximizeWindowHorizontallyKey ();
        void optionSetMaximizeWindowHorizontallyKeyInitiate (CompAction::CallBack init);
        void optionSetMaximizeWindowHorizontallyKeyTerminate (CompAction::CallBack term);
        void optionSetMaximizeWindowHorizontallyKeyNotify (ChangeNotify notify);

        CompAction & optionGetMaximizeWindowVerticallyKey ();
        void optionSetMaximizeWindowVerticallyKeyInitiate (CompAction::CallBack init);
        void optionSetMaximizeWindowVerticallyKeyTerminate (CompAction::CallBack term);
        void optionSetMaximizeWindowVerticallyKeyNotify (ChangeNotify notify);

        CompAction & optionGetWindowMenuKey ();
        void optionSetWindowMenuKeyInitiate (CompAction::CallBack init);
        void optionSetWindowMenuKeyTerminate (CompAction::CallBack term);
        void optionSetWindowMenuKeyNotify (ChangeNotify notify);

        CompAction & optionGetWindowMenuButton ();
        void optionSetWindowMenuButtonInitiate (CompAction::CallBack init);
        void optionSetWindowMenuButtonTerminate (CompAction::CallBack term);
        void optionSetWindowMenuButtonNotify (ChangeNotify notify);

        CompAction & optionGetShowDesktopKey ();
        void optionSetShowDesktopKeyInitiate (CompAction::CallBack init);
        void optionSetShowDesktopKeyTerminate (CompAction::CallBack term);
        void optionSetShowDesktopKeyNotify (ChangeNotify notify);

        CompAction & optionGetShowDesktopEdge ();
        void optionSetShowDesktopEdgeInitiate (CompAction::CallBack init);
        void optionSetShowDesktopEdgeTerminate (CompAction::CallBack term);
        void optionSetShowDesktopEdgeNotify (ChangeNotify notify);

        CompAction & optionGetToggleWindowMaximizedKey ();
        void optionSetToggleWindowMaximizedKeyInitiate (CompAction::CallBack init);
        void optionSetToggleWindowMaximizedKeyTerminate (CompAction::CallBack term);
        void optionSetToggleWindowMaximizedKeyNotify (ChangeNotify notify);

        CompAction & optionGetToggleWindowMaximizedButton ();
        void optionSetToggleWindowMaximizedButtonInitiate (CompAction::CallBack init);
        void optionSetToggleWindowMaximizedButtonTerminate (CompAction::CallBack term);
        void optionSetToggleWindowMaximizedButtonNotify (ChangeNotify notify);

        CompAction & optionGetToggleWindowMaximizedHorizontallyKey ();
        void optionSetToggleWindowMaximizedHorizontallyKeyInitiate (CompAction::CallBack init);
        void optionSetToggleWindowMaximizedHorizontallyKeyTerminate (CompAction::CallBack term);
        void optionSetToggleWindowMaximizedHorizontallyKeyNotify (ChangeNotify notify);

        CompAction & optionGetToggleWindowMaximizedVerticallyKey ();
        void optionSetToggleWindowMaximizedVerticallyKeyInitiate (CompAction::CallBack init);
        void optionSetToggleWindowMaximizedVerticallyKeyTerminate (CompAction::CallBack term);
        void optionSetToggleWindowMaximizedVerticallyKeyNotify (ChangeNotify notify);

        CompAction & optionGetToggleWindowShadedKey ();
        void optionSetToggleWindowShadedKeyInitiate (CompAction::CallBack init);
        void optionSetToggleWindowShadedKeyTerminate (CompAction::CallBack term);
        void optionSetToggleWindowShadedKeyNotify (ChangeNotify notify);

        int optionGetHsize ();
        void optionSetHsizeNotify (ChangeNotify notify);

        int optionGetVsize ();
        void optionSetVsizeNotify (ChangeNotify notify);


    protected:
        CompOption::Vector mOptions;

    private:
        std::vector<ChangeNotify> mNotify;

};


inline CompOption::Value::Vector &
CoreOptions::optionGetActivePlugins ()
{
    return mOptions[CoreOptions::ActivePlugins].value ().list ();
}

inline void
CoreOptions::optionSetActivePluginsNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::ActivePlugins] = notify;
}

inline bool
CoreOptions::optionGetAudibleBell ()
{
    return mOptions[CoreOptions::AudibleBell].value ().b ();
}

inline void
CoreOptions::optionSetAudibleBellNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::AudibleBell] = notify;
}

inline bool
CoreOptions::optionGetIgnoreHintsWhenMaximized ()
{
    return mOptions[CoreOptions::IgnoreHintsWhenMaximized].value ().b ();
}

inline void
CoreOptions::optionSetIgnoreHintsWhenMaximizedNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::IgnoreHintsWhenMaximized] = notify;
}

inline bool
CoreOptions::optionGetHideSkipTaskbarWindows ()
{
    return mOptions[CoreOptions::HideSkipTaskbarWindows].value ().b ();
}

inline void
CoreOptions::optionSetHideSkipTaskbarWindowsNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::HideSkipTaskbarWindows] = notify;
}

inline int
CoreOptions::optionGetEdgeDelay ()
{
    return mOptions[CoreOptions::EdgeDelay].value ().i ();
}

inline void
CoreOptions::optionSetEdgeDelayNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::EdgeDelay] = notify;
}

inline int
CoreOptions::optionGetPingDelay ()
{
    return mOptions[CoreOptions::PingDelay].value ().i ();
}

inline void
CoreOptions::optionSetPingDelayNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::PingDelay] = notify;
}

inline CompString
CoreOptions::optionGetDefaultIcon ()
{
    return mOptions[CoreOptions::DefaultIcon].value ().s ();
}

inline void
CoreOptions::optionSetDefaultIconNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::DefaultIcon] = notify;
}

inline bool
CoreOptions::optionGetDoSerialize ()
{
    return mOptions[CoreOptions::DoSerialize].value ().b ();
}

inline void
CoreOptions::optionSetDoSerializeNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::DoSerialize] = notify;
}

inline int
CoreOptions::optionGetOverlappingOutputs ()
{
    return mOptions[CoreOptions::OverlappingOutputs].value ().i ();
}

inline void
CoreOptions::optionSetOverlappingOutputsNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::OverlappingOutputs] = notify;
}

inline bool
CoreOptions::optionGetDetectOutputs ()
{
    return mOptions[CoreOptions::DetectOutputs].value ().b ();
}

inline void
CoreOptions::optionSetDetectOutputsNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::DetectOutputs] = notify;
}

inline CompOption::Value::Vector &
CoreOptions::optionGetOutputs ()
{
    return mOptions[CoreOptions::Outputs].value ().list ();
}

inline void
CoreOptions::optionSetOutputsNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::Outputs] = notify;
}

inline bool
CoreOptions::optionGetClickToFocus ()
{
    return mOptions[CoreOptions::ClickToFocus].value ().b ();
}

inline void
CoreOptions::optionSetClickToFocusNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::ClickToFocus] = notify;
}

inline bool
CoreOptions::optionGetRaiseOnClick ()
{
    return mOptions[CoreOptions::RaiseOnClick].value ().b ();
}

inline void
CoreOptions::optionSetRaiseOnClickNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::RaiseOnClick] = notify;
}

inline bool
CoreOptions::optionGetAutoraise ()
{
    return mOptions[CoreOptions::Autoraise].value ().b ();
}

inline void
CoreOptions::optionSetAutoraiseNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::Autoraise] = notify;
}

inline int
CoreOptions::optionGetAutoraiseDelay ()
{
    return mOptions[CoreOptions::AutoraiseDelay].value ().i ();
}

inline void
CoreOptions::optionSetAutoraiseDelayNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::AutoraiseDelay] = notify;
}

inline bool
CoreOptions::optionGetFocusDesktop ()
{
    return mOptions[CoreOptions::FocusDesktop].value ().b ();
}

inline void
CoreOptions::optionSetFocusDesktopNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::FocusDesktop] = notify;
}

inline int
CoreOptions::optionGetFocusPreventionLevel ()
{
    return mOptions[CoreOptions::FocusPreventionLevel].value ().i ();
}

inline void
CoreOptions::optionSetFocusPreventionLevelNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::FocusPreventionLevel] = notify;
}

inline CompMatch &
CoreOptions::optionGetFocusPreventionMatch ()
{
    return mOptions[CoreOptions::FocusPreventionMatch].value ().match ();
}

inline void
CoreOptions::optionSetFocusPreventionMatchNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::FocusPreventionMatch] = notify;
}

inline CompAction &
CoreOptions::optionGetCloseWindowKey ()
{
    return mOptions[CoreOptions::CloseWindowKey].value ().action ();
}

inline void
CoreOptions::optionSetCloseWindowKeyInitiate (CompAction::CallBack init)
{
    mOptions[CoreOptions::CloseWindowKey].value ().action ().setInitiate (init);
}

inline void
CoreOptions::optionSetCloseWindowKeyTerminate (CompAction::CallBack term)
{
    mOptions[CoreOptions::CloseWindowKey].value ().action ().setTerminate (term);
}

inline void
CoreOptions::optionSetCloseWindowKeyNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::CloseWindowKey] = notify;
}

inline CompAction &
CoreOptions::optionGetCloseWindowButton ()
{
    return mOptions[CoreOptions::CloseWindowButton].value ().action ();
}

inline void
CoreOptions::optionSetCloseWindowButtonInitiate (CompAction::CallBack init)
{
    mOptions[CoreOptions::CloseWindowButton].value ().action ().setInitiate (init);
}

inline void
CoreOptions::optionSetCloseWindowButtonTerminate (CompAction::CallBack term)
{
    mOptions[CoreOptions::CloseWindowButton].value ().action ().setTerminate (term);
}

inline void
CoreOptions::optionSetCloseWindowButtonNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::CloseWindowButton] = notify;
}

inline CompAction &
CoreOptions::optionGetRaiseWindowKey ()
{
    return mOptions[CoreOptions::RaiseWindowKey].value ().action ();
}

inline void
CoreOptions::optionSetRaiseWindowKeyInitiate (CompAction::CallBack init)
{
    mOptions[CoreOptions::RaiseWindowKey].value ().action ().setInitiate (init);
}

inline void
CoreOptions::optionSetRaiseWindowKeyTerminate (CompAction::CallBack term)
{
    mOptions[CoreOptions::RaiseWindowKey].value ().action ().setTerminate (term);
}

inline void
CoreOptions::optionSetRaiseWindowKeyNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::RaiseWindowKey] = notify;
}

inline CompAction &
CoreOptions::optionGetRaiseWindowButton ()
{
    return mOptions[CoreOptions::RaiseWindowButton].value ().action ();
}

inline void
CoreOptions::optionSetRaiseWindowButtonInitiate (CompAction::CallBack init)
{
    mOptions[CoreOptions::RaiseWindowButton].value ().action ().setInitiate (init);
}

inline void
CoreOptions::optionSetRaiseWindowButtonTerminate (CompAction::CallBack term)
{
    mOptions[CoreOptions::RaiseWindowButton].value ().action ().setTerminate (term);
}

inline void
CoreOptions::optionSetRaiseWindowButtonNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::RaiseWindowButton] = notify;
}

inline CompAction &
CoreOptions::optionGetLowerWindowKey ()
{
    return mOptions[CoreOptions::LowerWindowKey].value ().action ();
}

inline void
CoreOptions::optionSetLowerWindowKeyInitiate (CompAction::CallBack init)
{
    mOptions[CoreOptions::LowerWindowKey].value ().action ().setInitiate (init);
}

inline void
CoreOptions::optionSetLowerWindowKeyTerminate (CompAction::CallBack term)
{
    mOptions[CoreOptions::LowerWindowKey].value ().action ().setTerminate (term);
}

inline void
CoreOptions::optionSetLowerWindowKeyNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::LowerWindowKey] = notify;
}

inline CompAction &
CoreOptions::optionGetLowerWindowButton ()
{
    return mOptions[CoreOptions::LowerWindowButton].value ().action ();
}

inline void
CoreOptions::optionSetLowerWindowButtonInitiate (CompAction::CallBack init)
{
    mOptions[CoreOptions::LowerWindowButton].value ().action ().setInitiate (init);
}

inline void
CoreOptions::optionSetLowerWindowButtonTerminate (CompAction::CallBack term)
{
    mOptions[CoreOptions::LowerWindowButton].value ().action ().setTerminate (term);
}

inline void
CoreOptions::optionSetLowerWindowButtonNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::LowerWindowButton] = notify;
}

inline CompAction &
CoreOptions::optionGetMinimizeWindowKey ()
{
    return mOptions[CoreOptions::MinimizeWindowKey].value ().action ();
}

inline void
CoreOptions::optionSetMinimizeWindowKeyInitiate (CompAction::CallBack init)
{
    mOptions[CoreOptions::MinimizeWindowKey].value ().action ().setInitiate (init);
}

inline void
CoreOptions::optionSetMinimizeWindowKeyTerminate (CompAction::CallBack term)
{
    mOptions[CoreOptions::MinimizeWindowKey].value ().action ().setTerminate (term);
}

inline void
CoreOptions::optionSetMinimizeWindowKeyNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::MinimizeWindowKey] = notify;
}

inline CompAction &
CoreOptions::optionGetMinimizeWindowButton ()
{
    return mOptions[CoreOptions::MinimizeWindowButton].value ().action ();
}

inline void
CoreOptions::optionSetMinimizeWindowButtonInitiate (CompAction::CallBack init)
{
    mOptions[CoreOptions::MinimizeWindowButton].value ().action ().setInitiate (init);
}

inline void
CoreOptions::optionSetMinimizeWindowButtonTerminate (CompAction::CallBack term)
{
    mOptions[CoreOptions::MinimizeWindowButton].value ().action ().setTerminate (term);
}

inline void
CoreOptions::optionSetMinimizeWindowButtonNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::MinimizeWindowButton] = notify;
}

inline CompAction &
CoreOptions::optionGetMaximizeWindowKey ()
{
    return mOptions[CoreOptions::MaximizeWindowKey].value ().action ();
}

inline void
CoreOptions::optionSetMaximizeWindowKeyInitiate (CompAction::CallBack init)
{
    mOptions[CoreOptions::MaximizeWindowKey].value ().action ().setInitiate (init);
}

inline void
CoreOptions::optionSetMaximizeWindowKeyTerminate (CompAction::CallBack term)
{
    mOptions[CoreOptions::MaximizeWindowKey].value ().action ().setTerminate (term);
}

inline void
CoreOptions::optionSetMaximizeWindowKeyNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::MaximizeWindowKey] = notify;
}

inline CompAction &
CoreOptions::optionGetUnmaximizeWindowKey ()
{
    return mOptions[CoreOptions::UnmaximizeWindowKey].value ().action ();
}

inline void
CoreOptions::optionSetUnmaximizeWindowKeyInitiate (CompAction::CallBack init)
{
    mOptions[CoreOptions::UnmaximizeWindowKey].value ().action ().setInitiate (init);
}

inline void
CoreOptions::optionSetUnmaximizeWindowKeyTerminate (CompAction::CallBack term)
{
    mOptions[CoreOptions::UnmaximizeWindowKey].value ().action ().setTerminate (term);
}

inline void
CoreOptions::optionSetUnmaximizeWindowKeyNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::UnmaximizeWindowKey] = notify;
}

inline CompAction &
CoreOptions::optionGetUnmaximizeOrMinimizeWindowKey ()
{
    return mOptions[CoreOptions::UnmaximizeOrMinimizeWindowKey].value ().action ();
}

inline void
CoreOptions::optionSetUnmaximizeOrMinimizeWindowKeyInitiate (CompAction::CallBack init)
{
    mOptions[CoreOptions::UnmaximizeOrMinimizeWindowKey].value ().action ().setInitiate (init);
}

inline void
CoreOptions::optionSetUnmaximizeOrMinimizeWindowKeyTerminate (CompAction::CallBack term)
{
    mOptions[CoreOptions::UnmaximizeOrMinimizeWindowKey].value ().action ().setTerminate (term);
}

inline void
CoreOptions::optionSetUnmaximizeOrMinimizeWindowKeyNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::UnmaximizeOrMinimizeWindowKey] = notify;
}

inline CompAction &
CoreOptions::optionGetMaximizeWindowHorizontallyKey ()
{
    return mOptions[CoreOptions::MaximizeWindowHorizontallyKey].value ().action ();
}

inline void
CoreOptions::optionSetMaximizeWindowHorizontallyKeyInitiate (CompAction::CallBack init)
{
    mOptions[CoreOptions::MaximizeWindowHorizontallyKey].value ().action ().setInitiate (init);
}

inline void
CoreOptions::optionSetMaximizeWindowHorizontallyKeyTerminate (CompAction::CallBack term)
{
    mOptions[CoreOptions::MaximizeWindowHorizontallyKey].value ().action ().setTerminate (term);
}

inline void
CoreOptions::optionSetMaximizeWindowHorizontallyKeyNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::MaximizeWindowHorizontallyKey] = notify;
}

inline CompAction &
CoreOptions::optionGetMaximizeWindowVerticallyKey ()
{
    return mOptions[CoreOptions::MaximizeWindowVerticallyKey].value ().action ();
}

inline void
CoreOptions::optionSetMaximizeWindowVerticallyKeyInitiate (CompAction::CallBack init)
{
    mOptions[CoreOptions::MaximizeWindowVerticallyKey].value ().action ().setInitiate (init);
}

inline void
CoreOptions::optionSetMaximizeWindowVerticallyKeyTerminate (CompAction::CallBack term)
{
    mOptions[CoreOptions::MaximizeWindowVerticallyKey].value ().action ().setTerminate (term);
}

inline void
CoreOptions::optionSetMaximizeWindowVerticallyKeyNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::MaximizeWindowVerticallyKey] = notify;
}

inline CompAction &
CoreOptions::optionGetWindowMenuKey ()
{
    return mOptions[CoreOptions::WindowMenuKey].value ().action ();
}

inline void
CoreOptions::optionSetWindowMenuKeyInitiate (CompAction::CallBack init)
{
    mOptions[CoreOptions::WindowMenuKey].value ().action ().setInitiate (init);
}

inline void
CoreOptions::optionSetWindowMenuKeyTerminate (CompAction::CallBack term)
{
    mOptions[CoreOptions::WindowMenuKey].value ().action ().setTerminate (term);
}

inline void
CoreOptions::optionSetWindowMenuKeyNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::WindowMenuKey] = notify;
}

inline CompAction &
CoreOptions::optionGetWindowMenuButton ()
{
    return mOptions[CoreOptions::WindowMenuButton].value ().action ();
}

inline void
CoreOptions::optionSetWindowMenuButtonInitiate (CompAction::CallBack init)
{
    mOptions[CoreOptions::WindowMenuButton].value ().action ().setInitiate (init);
}

inline void
CoreOptions::optionSetWindowMenuButtonTerminate (CompAction::CallBack term)
{
    mOptions[CoreOptions::WindowMenuButton].value ().action ().setTerminate (term);
}

inline void
CoreOptions::optionSetWindowMenuButtonNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::WindowMenuButton] = notify;
}

inline CompAction &
CoreOptions::optionGetShowDesktopKey ()
{
    return mOptions[CoreOptions::ShowDesktopKey].value ().action ();
}

inline void
CoreOptions::optionSetShowDesktopKeyInitiate (CompAction::CallBack init)
{
    mOptions[CoreOptions::ShowDesktopKey].value ().action ().setInitiate (init);
}

inline void
CoreOptions::optionSetShowDesktopKeyTerminate (CompAction::CallBack term)
{
    mOptions[CoreOptions::ShowDesktopKey].value ().action ().setTerminate (term);
}

inline void
CoreOptions::optionSetShowDesktopKeyNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::ShowDesktopKey] = notify;
}

inline CompAction &
CoreOptions::optionGetShowDesktopEdge ()
{
    return mOptions[CoreOptions::ShowDesktopEdge].value ().action ();
}

inline void
CoreOptions::optionSetShowDesktopEdgeInitiate (CompAction::CallBack init)
{
    mOptions[CoreOptions::ShowDesktopEdge].value ().action ().setInitiate (init);
}

inline void
CoreOptions::optionSetShowDesktopEdgeTerminate (CompAction::CallBack term)
{
    mOptions[CoreOptions::ShowDesktopEdge].value ().action ().setTerminate (term);
}

inline void
CoreOptions::optionSetShowDesktopEdgeNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::ShowDesktopEdge] = notify;
}

inline CompAction &
CoreOptions::optionGetToggleWindowMaximizedKey ()
{
    return mOptions[CoreOptions::ToggleWindowMaximizedKey].value ().action ();
}

inline void
CoreOptions::optionSetToggleWindowMaximizedKeyInitiate (CompAction::CallBack init)
{
    mOptions[CoreOptions::ToggleWindowMaximizedKey].value ().action ().setInitiate (init);
}

inline void
CoreOptions::optionSetToggleWindowMaximizedKeyTerminate (CompAction::CallBack term)
{
    mOptions[CoreOptions::ToggleWindowMaximizedKey].value ().action ().setTerminate (term);
}

inline void
CoreOptions::optionSetToggleWindowMaximizedKeyNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::ToggleWindowMaximizedKey] = notify;
}

inline CompAction &
CoreOptions::optionGetToggleWindowMaximizedButton ()
{
    return mOptions[CoreOptions::ToggleWindowMaximizedButton].value ().action ();
}

inline void
CoreOptions::optionSetToggleWindowMaximizedButtonInitiate (CompAction::CallBack init)
{
    mOptions[CoreOptions::ToggleWindowMaximizedButton].value ().action ().setInitiate (init);
}

inline void
CoreOptions::optionSetToggleWindowMaximizedButtonTerminate (CompAction::CallBack term)
{
    mOptions[CoreOptions::ToggleWindowMaximizedButton].value ().action ().setTerminate (term);
}

inline void
CoreOptions::optionSetToggleWindowMaximizedButtonNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::ToggleWindowMaximizedButton] = notify;
}

inline CompAction &
CoreOptions::optionGetToggleWindowMaximizedHorizontallyKey ()
{
    return mOptions[CoreOptions::ToggleWindowMaximizedHorizontallyKey].value ().action ();
}

inline void
CoreOptions::optionSetToggleWindowMaximizedHorizontallyKeyInitiate (CompAction::CallBack init)
{
    mOptions[CoreOptions::ToggleWindowMaximizedHorizontallyKey].value ().action ().setInitiate (init);
}

inline void
CoreOptions::optionSetToggleWindowMaximizedHorizontallyKeyTerminate (CompAction::CallBack term)
{
    mOptions[CoreOptions::ToggleWindowMaximizedHorizontallyKey].value ().action ().setTerminate (term);
}

inline void
CoreOptions::optionSetToggleWindowMaximizedHorizontallyKeyNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::ToggleWindowMaximizedHorizontallyKey] = notify;
}

inline CompAction &
CoreOptions::optionGetToggleWindowMaximizedVerticallyKey ()
{
    return mOptions[CoreOptions::ToggleWindowMaximizedVerticallyKey].value ().action ();
}

inline void
CoreOptions::optionSetToggleWindowMaximizedVerticallyKeyInitiate (CompAction::CallBack init)
{
    mOptions[CoreOptions::ToggleWindowMaximizedVerticallyKey].value ().action ().setInitiate (init);
}

inline void
CoreOptions::optionSetToggleWindowMaximizedVerticallyKeyTerminate (CompAction::CallBack term)
{
    mOptions[CoreOptions::ToggleWindowMaximizedVerticallyKey].value ().action ().setTerminate (term);
}

inline void
CoreOptions::optionSetToggleWindowMaximizedVerticallyKeyNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::ToggleWindowMaximizedVerticallyKey] = notify;
}

inline CompAction &
CoreOptions::optionGetToggleWindowShadedKey ()
{
    return mOptions[CoreOptions::ToggleWindowShadedKey].value ().action ();
}

inline void
CoreOptions::optionSetToggleWindowShadedKeyInitiate (CompAction::CallBack init)
{
    mOptions[CoreOptions::ToggleWindowShadedKey].value ().action ().setInitiate (init);
}

inline void
CoreOptions::optionSetToggleWindowShadedKeyTerminate (CompAction::CallBack term)
{
    mOptions[CoreOptions::ToggleWindowShadedKey].value ().action ().setTerminate (term);
}

inline void
CoreOptions::optionSetToggleWindowShadedKeyNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::ToggleWindowShadedKey] = notify;
}

inline int
CoreOptions::optionGetHsize ()
{
    return mOptions[CoreOptions::Hsize].value ().i ();
}

inline void
CoreOptions::optionSetHsizeNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::Hsize] = notify;
}

inline int
CoreOptions::optionGetVsize ()
{
    return mOptions[CoreOptions::Vsize].value ().i ();
}

inline void
CoreOptions::optionSetVsizeNotify (CoreOptions::ChangeNotify notify)
{
    mNotify[CoreOptions::Vsize] = notify;
}



#endif
