/*
 * This file is autogenerated with bcop:
 * The Compiz option code generator
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 */

#ifndef _ANIMATION_OPTIONS_H
#define _ANIMATION_OPTIONS_H

#include <core/core.h>

class AnimationOptions : public CompOption::Class {
    public:
        enum Options {
            OpenEffects,
            OpenDurations,
            OpenMatches,
            OpenOptions,
            OpenRandomEffects,
            CloseEffects,
            CloseDurations,
            CloseMatches,
            CloseOptions,
            CloseRandomEffects,
            MinimizeEffects,
            MinimizeDurations,
            MinimizeMatches,
            MinimizeOptions,
            MinimizeRandomEffects,
            UnminimizeEffects,
            UnminimizeDurations,
            UnminimizeMatches,
            UnminimizeOptions,
            UnminimizeRandomEffects,
            ShadeEffects,
            ShadeDurations,
            ShadeMatches,
            ShadeOptions,
            ShadeRandomEffects,
            FocusEffects,
            FocusDurations,
            FocusMatches,
            FocusOptions,
            AllRandom,
            TimeStep,
            CurvedFoldAmpMult,
            CurvedFoldZoomToTaskbar,
            DodgeMode,
            DodgeGapRatio,
            DreamZoomToTaskbar,
            Glide1AwayPosition,
            Glide1AwayAngle,
            Glide1ZoomToTaskbar,
            Glide2AwayPosition,
            Glide2AwayAngle,
            Glide2ZoomToTaskbar,
            HorizontalFoldsAmpMult,
            HorizontalFoldsNumFolds,
            HorizontalFoldsZoomToTaskbar,
            MagicLampMovingEnd,
            MagicLampGridRes,
            MagicLampOpenStartWidth,
            MagicLampWavyMovingEnd,
            MagicLampWavyGridRes,
            MagicLampWavyMaxWaves,
            MagicLampWavyAmpMin,
            MagicLampWavyAmpMax,
            MagicLampWavyOpenStartWidth,
            RollupFixedInterior,
            SidekickNumRotations,
            SidekickSpringiness,
            SidekickZoomFromCenter,
            WaveWidth,
            WaveAmpMult,
            ZoomFromCenter,
            ZoomSpringiness,
            OptionNum
        };

        enum DodgeMode {
            DodgeModeFixedClickedWindow = 0,
            DodgeModeAllMoving = 1,
        };

        enum SidekickZoomFromCenter {
            SidekickZoomFromCenterOff = 0,
            SidekickZoomFromCenterMinimizeUnminimizeOnly = 1,
            SidekickZoomFromCenterOpenCloseOnly = 2,
            SidekickZoomFromCenterOn = 3,
        };

        enum ZoomFromCenter {
            ZoomFromCenterOff = 0,
            ZoomFromCenterMinimizeUnminimizeOnly = 1,
            ZoomFromCenterOpenCloseOnly = 2,
            ZoomFromCenterOn = 3,
        };

        typedef boost::function <void (CompOption *opt, Options num)> ChangeNotify;

        AnimationOptions (bool init = true);
        virtual ~AnimationOptions ();

	void initOptions ();

        virtual CompOption::Vector & getOptions ();
        virtual bool setOption (const CompString &name, CompOption::Value &value);

        CompOption::Value::Vector & optionGetOpenEffects ();
        void optionSetOpenEffectsNotify (ChangeNotify notify);

        CompOption::Value::Vector & optionGetOpenDurations ();
        void optionSetOpenDurationsNotify (ChangeNotify notify);

        CompOption::Value::Vector & optionGetOpenMatches ();
        void optionSetOpenMatchesNotify (ChangeNotify notify);

        CompOption::Value::Vector & optionGetOpenOptions ();
        void optionSetOpenOptionsNotify (ChangeNotify notify);

        CompOption::Value::Vector & optionGetOpenRandomEffects ();
        void optionSetOpenRandomEffectsNotify (ChangeNotify notify);

        CompOption::Value::Vector & optionGetCloseEffects ();
        void optionSetCloseEffectsNotify (ChangeNotify notify);

        CompOption::Value::Vector & optionGetCloseDurations ();
        void optionSetCloseDurationsNotify (ChangeNotify notify);

        CompOption::Value::Vector & optionGetCloseMatches ();
        void optionSetCloseMatchesNotify (ChangeNotify notify);

        CompOption::Value::Vector & optionGetCloseOptions ();
        void optionSetCloseOptionsNotify (ChangeNotify notify);

        CompOption::Value::Vector & optionGetCloseRandomEffects ();
        void optionSetCloseRandomEffectsNotify (ChangeNotify notify);

        CompOption::Value::Vector & optionGetMinimizeEffects ();
        void optionSetMinimizeEffectsNotify (ChangeNotify notify);

        CompOption::Value::Vector & optionGetMinimizeDurations ();
        void optionSetMinimizeDurationsNotify (ChangeNotify notify);

        CompOption::Value::Vector & optionGetMinimizeMatches ();
        void optionSetMinimizeMatchesNotify (ChangeNotify notify);

        CompOption::Value::Vector & optionGetMinimizeOptions ();
        void optionSetMinimizeOptionsNotify (ChangeNotify notify);

        CompOption::Value::Vector & optionGetMinimizeRandomEffects ();
        void optionSetMinimizeRandomEffectsNotify (ChangeNotify notify);

        CompOption::Value::Vector & optionGetUnminimizeEffects ();
        void optionSetUnminimizeEffectsNotify (ChangeNotify notify);

        CompOption::Value::Vector & optionGetUnminimizeDurations ();
        void optionSetUnminimizeDurationsNotify (ChangeNotify notify);

        CompOption::Value::Vector & optionGetUnminimizeMatches ();
        void optionSetUnminimizeMatchesNotify (ChangeNotify notify);

        CompOption::Value::Vector & optionGetUnminimizeOptions ();
        void optionSetUnminimizeOptionsNotify (ChangeNotify notify);

        CompOption::Value::Vector & optionGetUnminimizeRandomEffects ();
        void optionSetUnminimizeRandomEffectsNotify (ChangeNotify notify);

        CompOption::Value::Vector & optionGetShadeEffects ();
        void optionSetShadeEffectsNotify (ChangeNotify notify);

        CompOption::Value::Vector & optionGetShadeDurations ();
        void optionSetShadeDurationsNotify (ChangeNotify notify);

        CompOption::Value::Vector & optionGetShadeMatches ();
        void optionSetShadeMatchesNotify (ChangeNotify notify);

        CompOption::Value::Vector & optionGetShadeOptions ();
        void optionSetShadeOptionsNotify (ChangeNotify notify);

        CompOption::Value::Vector & optionGetShadeRandomEffects ();
        void optionSetShadeRandomEffectsNotify (ChangeNotify notify);

        CompOption::Value::Vector & optionGetFocusEffects ();
        void optionSetFocusEffectsNotify (ChangeNotify notify);

        CompOption::Value::Vector & optionGetFocusDurations ();
        void optionSetFocusDurationsNotify (ChangeNotify notify);

        CompOption::Value::Vector & optionGetFocusMatches ();
        void optionSetFocusMatchesNotify (ChangeNotify notify);

        CompOption::Value::Vector & optionGetFocusOptions ();
        void optionSetFocusOptionsNotify (ChangeNotify notify);

        bool optionGetAllRandom ();
        void optionSetAllRandomNotify (ChangeNotify notify);

        int optionGetTimeStep ();
        void optionSetTimeStepNotify (ChangeNotify notify);

        float optionGetCurvedFoldAmpMult ();
        void optionSetCurvedFoldAmpMultNotify (ChangeNotify notify);

        bool optionGetCurvedFoldZoomToTaskbar ();
        void optionSetCurvedFoldZoomToTaskbarNotify (ChangeNotify notify);

        int optionGetDodgeMode ();
        void optionSetDodgeModeNotify (ChangeNotify notify);

        float optionGetDodgeGapRatio ();
        void optionSetDodgeGapRatioNotify (ChangeNotify notify);

        bool optionGetDreamZoomToTaskbar ();
        void optionSetDreamZoomToTaskbarNotify (ChangeNotify notify);

        float optionGetGlide1AwayPosition ();
        void optionSetGlide1AwayPositionNotify (ChangeNotify notify);

        float optionGetGlide1AwayAngle ();
        void optionSetGlide1AwayAngleNotify (ChangeNotify notify);

        bool optionGetGlide1ZoomToTaskbar ();
        void optionSetGlide1ZoomToTaskbarNotify (ChangeNotify notify);

        float optionGetGlide2AwayPosition ();
        void optionSetGlide2AwayPositionNotify (ChangeNotify notify);

        float optionGetGlide2AwayAngle ();
        void optionSetGlide2AwayAngleNotify (ChangeNotify notify);

        bool optionGetGlide2ZoomToTaskbar ();
        void optionSetGlide2ZoomToTaskbarNotify (ChangeNotify notify);

        float optionGetHorizontalFoldsAmpMult ();
        void optionSetHorizontalFoldsAmpMultNotify (ChangeNotify notify);

        int optionGetHorizontalFoldsNumFolds ();
        void optionSetHorizontalFoldsNumFoldsNotify (ChangeNotify notify);

        bool optionGetHorizontalFoldsZoomToTaskbar ();
        void optionSetHorizontalFoldsZoomToTaskbarNotify (ChangeNotify notify);

        bool optionGetMagicLampMovingEnd ();
        void optionSetMagicLampMovingEndNotify (ChangeNotify notify);

        int optionGetMagicLampGridRes ();
        void optionSetMagicLampGridResNotify (ChangeNotify notify);

        int optionGetMagicLampOpenStartWidth ();
        void optionSetMagicLampOpenStartWidthNotify (ChangeNotify notify);

        bool optionGetMagicLampWavyMovingEnd ();
        void optionSetMagicLampWavyMovingEndNotify (ChangeNotify notify);

        int optionGetMagicLampWavyGridRes ();
        void optionSetMagicLampWavyGridResNotify (ChangeNotify notify);

        int optionGetMagicLampWavyMaxWaves ();
        void optionSetMagicLampWavyMaxWavesNotify (ChangeNotify notify);

        float optionGetMagicLampWavyAmpMin ();
        void optionSetMagicLampWavyAmpMinNotify (ChangeNotify notify);

        float optionGetMagicLampWavyAmpMax ();
        void optionSetMagicLampWavyAmpMaxNotify (ChangeNotify notify);

        int optionGetMagicLampWavyOpenStartWidth ();
        void optionSetMagicLampWavyOpenStartWidthNotify (ChangeNotify notify);

        bool optionGetRollupFixedInterior ();
        void optionSetRollupFixedInteriorNotify (ChangeNotify notify);

        float optionGetSidekickNumRotations ();
        void optionSetSidekickNumRotationsNotify (ChangeNotify notify);

        float optionGetSidekickSpringiness ();
        void optionSetSidekickSpringinessNotify (ChangeNotify notify);

        int optionGetSidekickZoomFromCenter ();
        void optionSetSidekickZoomFromCenterNotify (ChangeNotify notify);

        float optionGetWaveWidth ();
        void optionSetWaveWidthNotify (ChangeNotify notify);

        float optionGetWaveAmpMult ();
        void optionSetWaveAmpMultNotify (ChangeNotify notify);

        int optionGetZoomFromCenter ();
        void optionSetZoomFromCenterNotify (ChangeNotify notify);

        float optionGetZoomSpringiness ();
        void optionSetZoomSpringinessNotify (ChangeNotify notify);


    protected:
        CompOption::Vector mOptions;

    private:
        std::vector<ChangeNotify> mNotify;

};


inline CompOption::Value::Vector &
AnimationOptions::optionGetOpenEffects ()
{
    return mOptions[AnimationOptions::OpenEffects].value ().list ();
}

inline void
AnimationOptions::optionSetOpenEffectsNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::OpenEffects] = notify;
}

inline CompOption::Value::Vector &
AnimationOptions::optionGetOpenDurations ()
{
    return mOptions[AnimationOptions::OpenDurations].value ().list ();
}

inline void
AnimationOptions::optionSetOpenDurationsNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::OpenDurations] = notify;
}

inline CompOption::Value::Vector &
AnimationOptions::optionGetOpenMatches ()
{
    return mOptions[AnimationOptions::OpenMatches].value ().list ();
}

inline void
AnimationOptions::optionSetOpenMatchesNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::OpenMatches] = notify;
}

inline CompOption::Value::Vector &
AnimationOptions::optionGetOpenOptions ()
{
    return mOptions[AnimationOptions::OpenOptions].value ().list ();
}

inline void
AnimationOptions::optionSetOpenOptionsNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::OpenOptions] = notify;
}

inline CompOption::Value::Vector &
AnimationOptions::optionGetOpenRandomEffects ()
{
    return mOptions[AnimationOptions::OpenRandomEffects].value ().list ();
}

inline void
AnimationOptions::optionSetOpenRandomEffectsNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::OpenRandomEffects] = notify;
}

inline CompOption::Value::Vector &
AnimationOptions::optionGetCloseEffects ()
{
    return mOptions[AnimationOptions::CloseEffects].value ().list ();
}

inline void
AnimationOptions::optionSetCloseEffectsNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::CloseEffects] = notify;
}

inline CompOption::Value::Vector &
AnimationOptions::optionGetCloseDurations ()
{
    return mOptions[AnimationOptions::CloseDurations].value ().list ();
}

inline void
AnimationOptions::optionSetCloseDurationsNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::CloseDurations] = notify;
}

inline CompOption::Value::Vector &
AnimationOptions::optionGetCloseMatches ()
{
    return mOptions[AnimationOptions::CloseMatches].value ().list ();
}

inline void
AnimationOptions::optionSetCloseMatchesNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::CloseMatches] = notify;
}

inline CompOption::Value::Vector &
AnimationOptions::optionGetCloseOptions ()
{
    return mOptions[AnimationOptions::CloseOptions].value ().list ();
}

inline void
AnimationOptions::optionSetCloseOptionsNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::CloseOptions] = notify;
}

inline CompOption::Value::Vector &
AnimationOptions::optionGetCloseRandomEffects ()
{
    return mOptions[AnimationOptions::CloseRandomEffects].value ().list ();
}

inline void
AnimationOptions::optionSetCloseRandomEffectsNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::CloseRandomEffects] = notify;
}

inline CompOption::Value::Vector &
AnimationOptions::optionGetMinimizeEffects ()
{
    return mOptions[AnimationOptions::MinimizeEffects].value ().list ();
}

inline void
AnimationOptions::optionSetMinimizeEffectsNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::MinimizeEffects] = notify;
}

inline CompOption::Value::Vector &
AnimationOptions::optionGetMinimizeDurations ()
{
    return mOptions[AnimationOptions::MinimizeDurations].value ().list ();
}

inline void
AnimationOptions::optionSetMinimizeDurationsNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::MinimizeDurations] = notify;
}

inline CompOption::Value::Vector &
AnimationOptions::optionGetMinimizeMatches ()
{
    return mOptions[AnimationOptions::MinimizeMatches].value ().list ();
}

inline void
AnimationOptions::optionSetMinimizeMatchesNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::MinimizeMatches] = notify;
}

inline CompOption::Value::Vector &
AnimationOptions::optionGetMinimizeOptions ()
{
    return mOptions[AnimationOptions::MinimizeOptions].value ().list ();
}

inline void
AnimationOptions::optionSetMinimizeOptionsNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::MinimizeOptions] = notify;
}

inline CompOption::Value::Vector &
AnimationOptions::optionGetMinimizeRandomEffects ()
{
    return mOptions[AnimationOptions::MinimizeRandomEffects].value ().list ();
}

inline void
AnimationOptions::optionSetMinimizeRandomEffectsNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::MinimizeRandomEffects] = notify;
}

inline CompOption::Value::Vector &
AnimationOptions::optionGetUnminimizeEffects ()
{
    return mOptions[AnimationOptions::UnminimizeEffects].value ().list ();
}

inline void
AnimationOptions::optionSetUnminimizeEffectsNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::UnminimizeEffects] = notify;
}

inline CompOption::Value::Vector &
AnimationOptions::optionGetUnminimizeDurations ()
{
    return mOptions[AnimationOptions::UnminimizeDurations].value ().list ();
}

inline void
AnimationOptions::optionSetUnminimizeDurationsNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::UnminimizeDurations] = notify;
}

inline CompOption::Value::Vector &
AnimationOptions::optionGetUnminimizeMatches ()
{
    return mOptions[AnimationOptions::UnminimizeMatches].value ().list ();
}

inline void
AnimationOptions::optionSetUnminimizeMatchesNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::UnminimizeMatches] = notify;
}

inline CompOption::Value::Vector &
AnimationOptions::optionGetUnminimizeOptions ()
{
    return mOptions[AnimationOptions::UnminimizeOptions].value ().list ();
}

inline void
AnimationOptions::optionSetUnminimizeOptionsNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::UnminimizeOptions] = notify;
}

inline CompOption::Value::Vector &
AnimationOptions::optionGetUnminimizeRandomEffects ()
{
    return mOptions[AnimationOptions::UnminimizeRandomEffects].value ().list ();
}

inline void
AnimationOptions::optionSetUnminimizeRandomEffectsNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::UnminimizeRandomEffects] = notify;
}

inline CompOption::Value::Vector &
AnimationOptions::optionGetShadeEffects ()
{
    return mOptions[AnimationOptions::ShadeEffects].value ().list ();
}

inline void
AnimationOptions::optionSetShadeEffectsNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::ShadeEffects] = notify;
}

inline CompOption::Value::Vector &
AnimationOptions::optionGetShadeDurations ()
{
    return mOptions[AnimationOptions::ShadeDurations].value ().list ();
}

inline void
AnimationOptions::optionSetShadeDurationsNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::ShadeDurations] = notify;
}

inline CompOption::Value::Vector &
AnimationOptions::optionGetShadeMatches ()
{
    return mOptions[AnimationOptions::ShadeMatches].value ().list ();
}

inline void
AnimationOptions::optionSetShadeMatchesNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::ShadeMatches] = notify;
}

inline CompOption::Value::Vector &
AnimationOptions::optionGetShadeOptions ()
{
    return mOptions[AnimationOptions::ShadeOptions].value ().list ();
}

inline void
AnimationOptions::optionSetShadeOptionsNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::ShadeOptions] = notify;
}

inline CompOption::Value::Vector &
AnimationOptions::optionGetShadeRandomEffects ()
{
    return mOptions[AnimationOptions::ShadeRandomEffects].value ().list ();
}

inline void
AnimationOptions::optionSetShadeRandomEffectsNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::ShadeRandomEffects] = notify;
}

inline CompOption::Value::Vector &
AnimationOptions::optionGetFocusEffects ()
{
    return mOptions[AnimationOptions::FocusEffects].value ().list ();
}

inline void
AnimationOptions::optionSetFocusEffectsNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::FocusEffects] = notify;
}

inline CompOption::Value::Vector &
AnimationOptions::optionGetFocusDurations ()
{
    return mOptions[AnimationOptions::FocusDurations].value ().list ();
}

inline void
AnimationOptions::optionSetFocusDurationsNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::FocusDurations] = notify;
}

inline CompOption::Value::Vector &
AnimationOptions::optionGetFocusMatches ()
{
    return mOptions[AnimationOptions::FocusMatches].value ().list ();
}

inline void
AnimationOptions::optionSetFocusMatchesNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::FocusMatches] = notify;
}

inline CompOption::Value::Vector &
AnimationOptions::optionGetFocusOptions ()
{
    return mOptions[AnimationOptions::FocusOptions].value ().list ();
}

inline void
AnimationOptions::optionSetFocusOptionsNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::FocusOptions] = notify;
}

inline bool
AnimationOptions::optionGetAllRandom ()
{
    return mOptions[AnimationOptions::AllRandom].value ().b ();
}

inline void
AnimationOptions::optionSetAllRandomNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::AllRandom] = notify;
}

inline int
AnimationOptions::optionGetTimeStep ()
{
    return mOptions[AnimationOptions::TimeStep].value ().i ();
}

inline void
AnimationOptions::optionSetTimeStepNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::TimeStep] = notify;
}

inline float
AnimationOptions::optionGetCurvedFoldAmpMult ()
{
    return mOptions[AnimationOptions::CurvedFoldAmpMult].value ().f ();
}

inline void
AnimationOptions::optionSetCurvedFoldAmpMultNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::CurvedFoldAmpMult] = notify;
}

inline bool
AnimationOptions::optionGetCurvedFoldZoomToTaskbar ()
{
    return mOptions[AnimationOptions::CurvedFoldZoomToTaskbar].value ().b ();
}

inline void
AnimationOptions::optionSetCurvedFoldZoomToTaskbarNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::CurvedFoldZoomToTaskbar] = notify;
}

inline int
AnimationOptions::optionGetDodgeMode ()
{
    return mOptions[AnimationOptions::DodgeMode].value ().i ();
}

inline void
AnimationOptions::optionSetDodgeModeNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::DodgeMode] = notify;
}

inline float
AnimationOptions::optionGetDodgeGapRatio ()
{
    return mOptions[AnimationOptions::DodgeGapRatio].value ().f ();
}

inline void
AnimationOptions::optionSetDodgeGapRatioNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::DodgeGapRatio] = notify;
}

inline bool
AnimationOptions::optionGetDreamZoomToTaskbar ()
{
    return mOptions[AnimationOptions::DreamZoomToTaskbar].value ().b ();
}

inline void
AnimationOptions::optionSetDreamZoomToTaskbarNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::DreamZoomToTaskbar] = notify;
}

inline float
AnimationOptions::optionGetGlide1AwayPosition ()
{
    return mOptions[AnimationOptions::Glide1AwayPosition].value ().f ();
}

inline void
AnimationOptions::optionSetGlide1AwayPositionNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::Glide1AwayPosition] = notify;
}

inline float
AnimationOptions::optionGetGlide1AwayAngle ()
{
    return mOptions[AnimationOptions::Glide1AwayAngle].value ().f ();
}

inline void
AnimationOptions::optionSetGlide1AwayAngleNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::Glide1AwayAngle] = notify;
}

inline bool
AnimationOptions::optionGetGlide1ZoomToTaskbar ()
{
    return mOptions[AnimationOptions::Glide1ZoomToTaskbar].value ().b ();
}

inline void
AnimationOptions::optionSetGlide1ZoomToTaskbarNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::Glide1ZoomToTaskbar] = notify;
}

inline float
AnimationOptions::optionGetGlide2AwayPosition ()
{
    return mOptions[AnimationOptions::Glide2AwayPosition].value ().f ();
}

inline void
AnimationOptions::optionSetGlide2AwayPositionNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::Glide2AwayPosition] = notify;
}

inline float
AnimationOptions::optionGetGlide2AwayAngle ()
{
    return mOptions[AnimationOptions::Glide2AwayAngle].value ().f ();
}

inline void
AnimationOptions::optionSetGlide2AwayAngleNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::Glide2AwayAngle] = notify;
}

inline bool
AnimationOptions::optionGetGlide2ZoomToTaskbar ()
{
    return mOptions[AnimationOptions::Glide2ZoomToTaskbar].value ().b ();
}

inline void
AnimationOptions::optionSetGlide2ZoomToTaskbarNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::Glide2ZoomToTaskbar] = notify;
}

inline float
AnimationOptions::optionGetHorizontalFoldsAmpMult ()
{
    return mOptions[AnimationOptions::HorizontalFoldsAmpMult].value ().f ();
}

inline void
AnimationOptions::optionSetHorizontalFoldsAmpMultNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::HorizontalFoldsAmpMult] = notify;
}

inline int
AnimationOptions::optionGetHorizontalFoldsNumFolds ()
{
    return mOptions[AnimationOptions::HorizontalFoldsNumFolds].value ().i ();
}

inline void
AnimationOptions::optionSetHorizontalFoldsNumFoldsNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::HorizontalFoldsNumFolds] = notify;
}

inline bool
AnimationOptions::optionGetHorizontalFoldsZoomToTaskbar ()
{
    return mOptions[AnimationOptions::HorizontalFoldsZoomToTaskbar].value ().b ();
}

inline void
AnimationOptions::optionSetHorizontalFoldsZoomToTaskbarNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::HorizontalFoldsZoomToTaskbar] = notify;
}

inline bool
AnimationOptions::optionGetMagicLampMovingEnd ()
{
    return mOptions[AnimationOptions::MagicLampMovingEnd].value ().b ();
}

inline void
AnimationOptions::optionSetMagicLampMovingEndNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::MagicLampMovingEnd] = notify;
}

inline int
AnimationOptions::optionGetMagicLampGridRes ()
{
    return mOptions[AnimationOptions::MagicLampGridRes].value ().i ();
}

inline void
AnimationOptions::optionSetMagicLampGridResNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::MagicLampGridRes] = notify;
}

inline int
AnimationOptions::optionGetMagicLampOpenStartWidth ()
{
    return mOptions[AnimationOptions::MagicLampOpenStartWidth].value ().i ();
}

inline void
AnimationOptions::optionSetMagicLampOpenStartWidthNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::MagicLampOpenStartWidth] = notify;
}

inline bool
AnimationOptions::optionGetMagicLampWavyMovingEnd ()
{
    return mOptions[AnimationOptions::MagicLampWavyMovingEnd].value ().b ();
}

inline void
AnimationOptions::optionSetMagicLampWavyMovingEndNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::MagicLampWavyMovingEnd] = notify;
}

inline int
AnimationOptions::optionGetMagicLampWavyGridRes ()
{
    return mOptions[AnimationOptions::MagicLampWavyGridRes].value ().i ();
}

inline void
AnimationOptions::optionSetMagicLampWavyGridResNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::MagicLampWavyGridRes] = notify;
}

inline int
AnimationOptions::optionGetMagicLampWavyMaxWaves ()
{
    return mOptions[AnimationOptions::MagicLampWavyMaxWaves].value ().i ();
}

inline void
AnimationOptions::optionSetMagicLampWavyMaxWavesNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::MagicLampWavyMaxWaves] = notify;
}

inline float
AnimationOptions::optionGetMagicLampWavyAmpMin ()
{
    return mOptions[AnimationOptions::MagicLampWavyAmpMin].value ().f ();
}

inline void
AnimationOptions::optionSetMagicLampWavyAmpMinNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::MagicLampWavyAmpMin] = notify;
}

inline float
AnimationOptions::optionGetMagicLampWavyAmpMax ()
{
    return mOptions[AnimationOptions::MagicLampWavyAmpMax].value ().f ();
}

inline void
AnimationOptions::optionSetMagicLampWavyAmpMaxNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::MagicLampWavyAmpMax] = notify;
}

inline int
AnimationOptions::optionGetMagicLampWavyOpenStartWidth ()
{
    return mOptions[AnimationOptions::MagicLampWavyOpenStartWidth].value ().i ();
}

inline void
AnimationOptions::optionSetMagicLampWavyOpenStartWidthNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::MagicLampWavyOpenStartWidth] = notify;
}

inline bool
AnimationOptions::optionGetRollupFixedInterior ()
{
    return mOptions[AnimationOptions::RollupFixedInterior].value ().b ();
}

inline void
AnimationOptions::optionSetRollupFixedInteriorNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::RollupFixedInterior] = notify;
}

inline float
AnimationOptions::optionGetSidekickNumRotations ()
{
    return mOptions[AnimationOptions::SidekickNumRotations].value ().f ();
}

inline void
AnimationOptions::optionSetSidekickNumRotationsNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::SidekickNumRotations] = notify;
}

inline float
AnimationOptions::optionGetSidekickSpringiness ()
{
    return mOptions[AnimationOptions::SidekickSpringiness].value ().f ();
}

inline void
AnimationOptions::optionSetSidekickSpringinessNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::SidekickSpringiness] = notify;
}

inline int
AnimationOptions::optionGetSidekickZoomFromCenter ()
{
    return mOptions[AnimationOptions::SidekickZoomFromCenter].value ().i ();
}

inline void
AnimationOptions::optionSetSidekickZoomFromCenterNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::SidekickZoomFromCenter] = notify;
}

inline float
AnimationOptions::optionGetWaveWidth ()
{
    return mOptions[AnimationOptions::WaveWidth].value ().f ();
}

inline void
AnimationOptions::optionSetWaveWidthNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::WaveWidth] = notify;
}

inline float
AnimationOptions::optionGetWaveAmpMult ()
{
    return mOptions[AnimationOptions::WaveAmpMult].value ().f ();
}

inline void
AnimationOptions::optionSetWaveAmpMultNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::WaveAmpMult] = notify;
}

inline int
AnimationOptions::optionGetZoomFromCenter ()
{
    return mOptions[AnimationOptions::ZoomFromCenter].value ().i ();
}

inline void
AnimationOptions::optionSetZoomFromCenterNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::ZoomFromCenter] = notify;
}

inline float
AnimationOptions::optionGetZoomSpringiness ()
{
    return mOptions[AnimationOptions::ZoomSpringiness].value ().f ();
}

inline void
AnimationOptions::optionSetZoomSpringinessNotify (AnimationOptions::ChangeNotify notify)
{
    mNotify[AnimationOptions::ZoomSpringiness] = notify;
}



#endif
