/*
 * This file is autogenerated with bcop:
 * The Compiz option code generator
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 */

#ifndef _ADDHELPER_OPTIONS_H
#define _ADDHELPER_OPTIONS_H

#include <core/core.h>

class AddhelperOptions : public CompOption::Class {
    public:
        enum Options {
            ToggleKey,
            WindowTypes,
            Ononinit,
            Brightness,
            Saturation,
            Opacity,
            OptionNum
        };

        typedef boost::function <void (CompOption *opt, Options num)> ChangeNotify;

        AddhelperOptions (bool init = true);
        virtual ~AddhelperOptions ();

	void initOptions ();

        virtual CompOption::Vector & getOptions ();
        virtual bool setOption (const CompString &name, CompOption::Value &value);

        CompAction & optionGetToggleKey ();
        void optionSetToggleKeyInitiate (CompAction::CallBack init);
        void optionSetToggleKeyTerminate (CompAction::CallBack term);
        void optionSetToggleKeyNotify (ChangeNotify notify);

        CompMatch & optionGetWindowTypes ();
        void optionSetWindowTypesNotify (ChangeNotify notify);

        bool optionGetOnoninit ();
        void optionSetOnoninitNotify (ChangeNotify notify);

        int optionGetBrightness ();
        void optionSetBrightnessNotify (ChangeNotify notify);

        int optionGetSaturation ();
        void optionSetSaturationNotify (ChangeNotify notify);

        int optionGetOpacity ();
        void optionSetOpacityNotify (ChangeNotify notify);


    protected:
        CompOption::Vector mOptions;

    private:
        std::vector<ChangeNotify> mNotify;

};


inline CompAction &
AddhelperOptions::optionGetToggleKey ()
{
    return mOptions[AddhelperOptions::ToggleKey].value ().action ();
}

inline void
AddhelperOptions::optionSetToggleKeyInitiate (CompAction::CallBack init)
{
    mOptions[AddhelperOptions::ToggleKey].value ().action ().setInitiate (init);
}

inline void
AddhelperOptions::optionSetToggleKeyTerminate (CompAction::CallBack term)
{
    mOptions[AddhelperOptions::ToggleKey].value ().action ().setTerminate (term);
}

inline void
AddhelperOptions::optionSetToggleKeyNotify (AddhelperOptions::ChangeNotify notify)
{
    mNotify[AddhelperOptions::ToggleKey] = notify;
}

inline CompMatch &
AddhelperOptions::optionGetWindowTypes ()
{
    return mOptions[AddhelperOptions::WindowTypes].value ().match ();
}

inline void
AddhelperOptions::optionSetWindowTypesNotify (AddhelperOptions::ChangeNotify notify)
{
    mNotify[AddhelperOptions::WindowTypes] = notify;
}

inline bool
AddhelperOptions::optionGetOnoninit ()
{
    return mOptions[AddhelperOptions::Ononinit].value ().b ();
}

inline void
AddhelperOptions::optionSetOnoninitNotify (AddhelperOptions::ChangeNotify notify)
{
    mNotify[AddhelperOptions::Ononinit] = notify;
}

inline int
AddhelperOptions::optionGetBrightness ()
{
    return mOptions[AddhelperOptions::Brightness].value ().i ();
}

inline void
AddhelperOptions::optionSetBrightnessNotify (AddhelperOptions::ChangeNotify notify)
{
    mNotify[AddhelperOptions::Brightness] = notify;
}

inline int
AddhelperOptions::optionGetSaturation ()
{
    return mOptions[AddhelperOptions::Saturation].value ().i ();
}

inline void
AddhelperOptions::optionSetSaturationNotify (AddhelperOptions::ChangeNotify notify)
{
    mNotify[AddhelperOptions::Saturation] = notify;
}

inline int
AddhelperOptions::optionGetOpacity ()
{
    return mOptions[AddhelperOptions::Opacity].value ().i ();
}

inline void
AddhelperOptions::optionSetOpacityNotify (AddhelperOptions::ChangeNotify notify)
{
    mNotify[AddhelperOptions::Opacity] = notify;
}



#endif
