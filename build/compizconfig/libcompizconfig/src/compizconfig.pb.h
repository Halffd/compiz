// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: compizconfig.proto
// Protobuf C++ Version: 5.29.2

#ifndef compizconfig_2eproto_2epb_2eh
#define compizconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_compizconfig_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_compizconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_compizconfig_2eproto;
namespace metadata {
class Plugin;
struct PluginDefaultTypeInternal;
extern PluginDefaultTypeInternal _Plugin_default_instance_;
class PluginBrief;
struct PluginBriefDefaultTypeInternal;
extern PluginBriefDefaultTypeInternal _PluginBrief_default_instance_;
class PluginInfo;
struct PluginInfoDefaultTypeInternal;
extern PluginInfoDefaultTypeInternal _PluginInfo_default_instance_;
class PluginInfo_Dependencies;
struct PluginInfo_DependenciesDefaultTypeInternal;
extern PluginInfo_DependenciesDefaultTypeInternal _PluginInfo_Dependencies_default_instance_;
class Plugin_Extension;
struct Plugin_ExtensionDefaultTypeInternal;
extern Plugin_ExtensionDefaultTypeInternal _Plugin_Extension_default_instance_;
class Plugin_Option;
struct Plugin_OptionDefaultTypeInternal;
extern Plugin_OptionDefaultTypeInternal _Plugin_Option_default_instance_;
class Plugin_Option_ColorValue;
struct Plugin_Option_ColorValueDefaultTypeInternal;
extern Plugin_Option_ColorValueDefaultTypeInternal _Plugin_Option_ColorValue_default_instance_;
class Plugin_Option_GenericValue;
struct Plugin_Option_GenericValueDefaultTypeInternal;
extern Plugin_Option_GenericValueDefaultTypeInternal _Plugin_Option_GenericValue_default_instance_;
class Plugin_Option_IntDescription;
struct Plugin_Option_IntDescriptionDefaultTypeInternal;
extern Plugin_Option_IntDescriptionDefaultTypeInternal _Plugin_Option_IntDescription_default_instance_;
class Plugin_Option_StringRestriction;
struct Plugin_Option_StringRestrictionDefaultTypeInternal;
extern Plugin_Option_StringRestrictionDefaultTypeInternal _Plugin_Option_StringRestriction_default_instance_;
class Plugin_Screen;
struct Plugin_ScreenDefaultTypeInternal;
extern Plugin_ScreenDefaultTypeInternal _Plugin_Screen_default_instance_;
}  // namespace metadata
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace metadata {
enum Plugin_Option_Type : int {
  Plugin_Option_Type_BOOL = 0,
  Plugin_Option_Type_INT = 1,
  Plugin_Option_Type_FLOAT = 2,
  Plugin_Option_Type_STRING = 3,
  Plugin_Option_Type_COLOR = 4,
  Plugin_Option_Type_ACTION = 5,
  Plugin_Option_Type_KEY = 6,
  Plugin_Option_Type_BUTTON = 7,
  Plugin_Option_Type_EDGE = 8,
  Plugin_Option_Type_BELL = 9,
  Plugin_Option_Type_MATCH = 10,
  Plugin_Option_Type_LIST = 11,
};

bool Plugin_Option_Type_IsValid(int value);
extern const uint32_t Plugin_Option_Type_internal_data_[];
constexpr Plugin_Option_Type Plugin_Option_Type_Type_MIN = static_cast<Plugin_Option_Type>(0);
constexpr Plugin_Option_Type Plugin_Option_Type_Type_MAX = static_cast<Plugin_Option_Type>(11);
constexpr int Plugin_Option_Type_Type_ARRAYSIZE = 11 + 1;
const ::google::protobuf::EnumDescriptor*
Plugin_Option_Type_descriptor();
template <typename T>
const std::string& Plugin_Option_Type_Name(T value) {
  static_assert(std::is_same<T, Plugin_Option_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return Plugin_Option_Type_Name(static_cast<Plugin_Option_Type>(value));
}
template <>
inline const std::string& Plugin_Option_Type_Name(Plugin_Option_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Plugin_Option_Type_descriptor,
                                                 0, 11>(
      static_cast<int>(value));
}
inline bool Plugin_Option_Type_Parse(absl::string_view name, Plugin_Option_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Plugin_Option_Type>(
      Plugin_Option_Type_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PluginInfo_Dependencies final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:metadata.PluginInfo.Dependencies) */ {
 public:
  inline PluginInfo_Dependencies() : PluginInfo_Dependencies(nullptr) {}
  ~PluginInfo_Dependencies() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PluginInfo_Dependencies* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PluginInfo_Dependencies));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PluginInfo_Dependencies(
      ::google::protobuf::internal::ConstantInitialized);

  inline PluginInfo_Dependencies(const PluginInfo_Dependencies& from) : PluginInfo_Dependencies(nullptr, from) {}
  inline PluginInfo_Dependencies(PluginInfo_Dependencies&& from) noexcept
      : PluginInfo_Dependencies(nullptr, std::move(from)) {}
  inline PluginInfo_Dependencies& operator=(const PluginInfo_Dependencies& from) {
    CopyFrom(from);
    return *this;
  }
  inline PluginInfo_Dependencies& operator=(PluginInfo_Dependencies&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PluginInfo_Dependencies& default_instance() {
    return *internal_default_instance();
  }
  static inline const PluginInfo_Dependencies* internal_default_instance() {
    return reinterpret_cast<const PluginInfo_Dependencies*>(
        &_PluginInfo_Dependencies_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(PluginInfo_Dependencies& a, PluginInfo_Dependencies& b) { a.Swap(&b); }
  inline void Swap(PluginInfo_Dependencies* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PluginInfo_Dependencies* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PluginInfo_Dependencies* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PluginInfo_Dependencies>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PluginInfo_Dependencies& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PluginInfo_Dependencies& from) { PluginInfo_Dependencies::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PluginInfo_Dependencies* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "metadata.PluginInfo.Dependencies"; }

 protected:
  explicit PluginInfo_Dependencies(::google::protobuf::Arena* arena);
  PluginInfo_Dependencies(::google::protobuf::Arena* arena, const PluginInfo_Dependencies& from);
  PluginInfo_Dependencies(::google::protobuf::Arena* arena, PluginInfo_Dependencies&& from) noexcept
      : PluginInfo_Dependencies(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAfterPluginFieldNumber = 1,
    kBeforePluginFieldNumber = 2,
    kRequirePluginFieldNumber = 3,
    kRequireFeatureFieldNumber = 4,
    kConflictPluginFieldNumber = 5,
    kConflictFeatureFieldNumber = 6,
  };
  // repeated string after_plugin = 1;
  int after_plugin_size() const;
  private:
  int _internal_after_plugin_size() const;

  public:
  void clear_after_plugin() ;
  const std::string& after_plugin(int index) const;
  std::string* mutable_after_plugin(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_after_plugin(int index, Arg_&& value, Args_... args);
  std::string* add_after_plugin();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_after_plugin(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& after_plugin() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_after_plugin();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_after_plugin() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_after_plugin();

  public:
  // repeated string before_plugin = 2;
  int before_plugin_size() const;
  private:
  int _internal_before_plugin_size() const;

  public:
  void clear_before_plugin() ;
  const std::string& before_plugin(int index) const;
  std::string* mutable_before_plugin(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_before_plugin(int index, Arg_&& value, Args_... args);
  std::string* add_before_plugin();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_before_plugin(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& before_plugin() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_before_plugin();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_before_plugin() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_before_plugin();

  public:
  // repeated string require_plugin = 3;
  int require_plugin_size() const;
  private:
  int _internal_require_plugin_size() const;

  public:
  void clear_require_plugin() ;
  const std::string& require_plugin(int index) const;
  std::string* mutable_require_plugin(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_require_plugin(int index, Arg_&& value, Args_... args);
  std::string* add_require_plugin();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_require_plugin(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& require_plugin() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_require_plugin();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_require_plugin() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_require_plugin();

  public:
  // repeated string require_feature = 4;
  int require_feature_size() const;
  private:
  int _internal_require_feature_size() const;

  public:
  void clear_require_feature() ;
  const std::string& require_feature(int index) const;
  std::string* mutable_require_feature(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_require_feature(int index, Arg_&& value, Args_... args);
  std::string* add_require_feature();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_require_feature(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& require_feature() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_require_feature();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_require_feature() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_require_feature();

  public:
  // repeated string conflict_plugin = 5;
  int conflict_plugin_size() const;
  private:
  int _internal_conflict_plugin_size() const;

  public:
  void clear_conflict_plugin() ;
  const std::string& conflict_plugin(int index) const;
  std::string* mutable_conflict_plugin(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_conflict_plugin(int index, Arg_&& value, Args_... args);
  std::string* add_conflict_plugin();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_conflict_plugin(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& conflict_plugin() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_conflict_plugin();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_conflict_plugin() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_conflict_plugin();

  public:
  // repeated string conflict_feature = 6;
  int conflict_feature_size() const;
  private:
  int _internal_conflict_feature_size() const;

  public:
  void clear_conflict_feature() ;
  const std::string& conflict_feature(int index) const;
  std::string* mutable_conflict_feature(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_conflict_feature(int index, Arg_&& value, Args_... args);
  std::string* add_conflict_feature();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_conflict_feature(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& conflict_feature() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_conflict_feature();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_conflict_feature() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_conflict_feature();

  public:
  // @@protoc_insertion_point(class_scope:metadata.PluginInfo.Dependencies)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      126, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PluginInfo_Dependencies& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> after_plugin_;
    ::google::protobuf::RepeatedPtrField<std::string> before_plugin_;
    ::google::protobuf::RepeatedPtrField<std::string> require_plugin_;
    ::google::protobuf::RepeatedPtrField<std::string> require_feature_;
    ::google::protobuf::RepeatedPtrField<std::string> conflict_plugin_;
    ::google::protobuf::RepeatedPtrField<std::string> conflict_feature_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_compizconfig_2eproto;
};
// -------------------------------------------------------------------

class Plugin_Option_StringRestriction final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:metadata.Plugin.Option.StringRestriction) */ {
 public:
  inline Plugin_Option_StringRestriction() : Plugin_Option_StringRestriction(nullptr) {}
  ~Plugin_Option_StringRestriction() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Plugin_Option_StringRestriction* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Plugin_Option_StringRestriction));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Plugin_Option_StringRestriction(
      ::google::protobuf::internal::ConstantInitialized);

  inline Plugin_Option_StringRestriction(const Plugin_Option_StringRestriction& from) : Plugin_Option_StringRestriction(nullptr, from) {}
  inline Plugin_Option_StringRestriction(Plugin_Option_StringRestriction&& from) noexcept
      : Plugin_Option_StringRestriction(nullptr, std::move(from)) {}
  inline Plugin_Option_StringRestriction& operator=(const Plugin_Option_StringRestriction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Plugin_Option_StringRestriction& operator=(Plugin_Option_StringRestriction&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Plugin_Option_StringRestriction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Plugin_Option_StringRestriction* internal_default_instance() {
    return reinterpret_cast<const Plugin_Option_StringRestriction*>(
        &_Plugin_Option_StringRestriction_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(Plugin_Option_StringRestriction& a, Plugin_Option_StringRestriction& b) { a.Swap(&b); }
  inline void Swap(Plugin_Option_StringRestriction* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Plugin_Option_StringRestriction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Plugin_Option_StringRestriction* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Plugin_Option_StringRestriction>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Plugin_Option_StringRestriction& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Plugin_Option_StringRestriction& from) { Plugin_Option_StringRestriction::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Plugin_Option_StringRestriction* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "metadata.Plugin.Option.StringRestriction"; }

 protected:
  explicit Plugin_Option_StringRestriction(::google::protobuf::Arena* arena);
  Plugin_Option_StringRestriction(::google::protobuf::Arena* arena, const Plugin_Option_StringRestriction& from);
  Plugin_Option_StringRestriction(::google::protobuf::Arena* arena, Plugin_Option_StringRestriction&& from) noexcept
      : Plugin_Option_StringRestriction(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // required string value = 1;
  bool has_value() const;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // required string name = 2;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:metadata.Plugin.Option.StringRestriction)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      58, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Plugin_Option_StringRestriction& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_compizconfig_2eproto;
};
// -------------------------------------------------------------------

class Plugin_Option_IntDescription final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:metadata.Plugin.Option.IntDescription) */ {
 public:
  inline Plugin_Option_IntDescription() : Plugin_Option_IntDescription(nullptr) {}
  ~Plugin_Option_IntDescription() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Plugin_Option_IntDescription* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Plugin_Option_IntDescription));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Plugin_Option_IntDescription(
      ::google::protobuf::internal::ConstantInitialized);

  inline Plugin_Option_IntDescription(const Plugin_Option_IntDescription& from) : Plugin_Option_IntDescription(nullptr, from) {}
  inline Plugin_Option_IntDescription(Plugin_Option_IntDescription&& from) noexcept
      : Plugin_Option_IntDescription(nullptr, std::move(from)) {}
  inline Plugin_Option_IntDescription& operator=(const Plugin_Option_IntDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline Plugin_Option_IntDescription& operator=(Plugin_Option_IntDescription&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Plugin_Option_IntDescription& default_instance() {
    return *internal_default_instance();
  }
  static inline const Plugin_Option_IntDescription* internal_default_instance() {
    return reinterpret_cast<const Plugin_Option_IntDescription*>(
        &_Plugin_Option_IntDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Plugin_Option_IntDescription& a, Plugin_Option_IntDescription& b) { a.Swap(&b); }
  inline void Swap(Plugin_Option_IntDescription* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Plugin_Option_IntDescription* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Plugin_Option_IntDescription* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Plugin_Option_IntDescription>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Plugin_Option_IntDescription& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Plugin_Option_IntDescription& from) { Plugin_Option_IntDescription::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Plugin_Option_IntDescription* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "metadata.Plugin.Option.IntDescription"; }

 protected:
  explicit Plugin_Option_IntDescription(::google::protobuf::Arena* arena);
  Plugin_Option_IntDescription(::google::protobuf::Arena* arena, const Plugin_Option_IntDescription& from);
  Plugin_Option_IntDescription(::google::protobuf::Arena* arena, Plugin_Option_IntDescription&& from) noexcept
      : Plugin_Option_IntDescription(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 2,
    kValueFieldNumber = 1,
  };
  // required string name = 2;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // required sint32 value = 1;
  bool has_value() const;
  void clear_value() ;
  ::int32_t value() const;
  void set_value(::int32_t value);

  private:
  ::int32_t _internal_value() const;
  void _internal_set_value(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:metadata.Plugin.Option.IntDescription)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      50, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Plugin_Option_IntDescription& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int32_t value_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_compizconfig_2eproto;
};
// -------------------------------------------------------------------

class Plugin_Option_ColorValue final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:metadata.Plugin.Option.ColorValue) */ {
 public:
  inline Plugin_Option_ColorValue() : Plugin_Option_ColorValue(nullptr) {}
  ~Plugin_Option_ColorValue() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Plugin_Option_ColorValue* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Plugin_Option_ColorValue));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Plugin_Option_ColorValue(
      ::google::protobuf::internal::ConstantInitialized);

  inline Plugin_Option_ColorValue(const Plugin_Option_ColorValue& from) : Plugin_Option_ColorValue(nullptr, from) {}
  inline Plugin_Option_ColorValue(Plugin_Option_ColorValue&& from) noexcept
      : Plugin_Option_ColorValue(nullptr, std::move(from)) {}
  inline Plugin_Option_ColorValue& operator=(const Plugin_Option_ColorValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline Plugin_Option_ColorValue& operator=(Plugin_Option_ColorValue&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Plugin_Option_ColorValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const Plugin_Option_ColorValue* internal_default_instance() {
    return reinterpret_cast<const Plugin_Option_ColorValue*>(
        &_Plugin_Option_ColorValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Plugin_Option_ColorValue& a, Plugin_Option_ColorValue& b) { a.Swap(&b); }
  inline void Swap(Plugin_Option_ColorValue* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Plugin_Option_ColorValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Plugin_Option_ColorValue* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Plugin_Option_ColorValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Plugin_Option_ColorValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Plugin_Option_ColorValue& from) { Plugin_Option_ColorValue::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Plugin_Option_ColorValue* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "metadata.Plugin.Option.ColorValue"; }

 protected:
  explicit Plugin_Option_ColorValue(::google::protobuf::Arena* arena);
  Plugin_Option_ColorValue(::google::protobuf::Arena* arena, const Plugin_Option_ColorValue& from);
  Plugin_Option_ColorValue(::google::protobuf::Arena* arena, Plugin_Option_ColorValue&& from) noexcept
      : Plugin_Option_ColorValue(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRedFieldNumber = 1,
    kGreenFieldNumber = 2,
    kBlueFieldNumber = 3,
    kAlphaFieldNumber = 4,
  };
  // optional string red = 1 [default = "0x0000"];
  bool has_red() const;
  void clear_red() ;
  const std::string& red() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_red(Arg_&& arg, Args_... args);
  std::string* mutable_red();
  PROTOBUF_NODISCARD std::string* release_red();
  void set_allocated_red(std::string* value);

  private:
  const std::string& _internal_red() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_red(
      const std::string& value);
  std::string* _internal_mutable_red();

  public:
  // optional string green = 2 [default = "0x0000"];
  bool has_green() const;
  void clear_green() ;
  const std::string& green() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_green(Arg_&& arg, Args_... args);
  std::string* mutable_green();
  PROTOBUF_NODISCARD std::string* release_green();
  void set_allocated_green(std::string* value);

  private:
  const std::string& _internal_green() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_green(
      const std::string& value);
  std::string* _internal_mutable_green();

  public:
  // optional string blue = 3 [default = "0x0000"];
  bool has_blue() const;
  void clear_blue() ;
  const std::string& blue() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_blue(Arg_&& arg, Args_... args);
  std::string* mutable_blue();
  PROTOBUF_NODISCARD std::string* release_blue();
  void set_allocated_blue(std::string* value);

  private:
  const std::string& _internal_blue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_blue(
      const std::string& value);
  std::string* _internal_mutable_blue();

  public:
  // optional string alpha = 4 [default = "0xffff"];
  bool has_alpha() const;
  void clear_alpha() ;
  const std::string& alpha() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_alpha(Arg_&& arg, Args_... args);
  std::string* mutable_alpha();
  PROTOBUF_NODISCARD std::string* release_alpha();
  void set_allocated_alpha(std::string* value);

  private:
  const std::string& _internal_alpha() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alpha(
      const std::string& value);
  std::string* _internal_mutable_alpha();

  public:
  // @@protoc_insertion_point(class_scope:metadata.Plugin.Option.ColorValue)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      59, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Plugin_Option_ColorValue& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    static const ::google::protobuf::internal::LazyString _i_give_permission_to_break_this_code_default_red_;
    ::google::protobuf::internal::ArenaStringPtr red_;
    static const ::google::protobuf::internal::LazyString _i_give_permission_to_break_this_code_default_green_;
    ::google::protobuf::internal::ArenaStringPtr green_;
    static const ::google::protobuf::internal::LazyString _i_give_permission_to_break_this_code_default_blue_;
    ::google::protobuf::internal::ArenaStringPtr blue_;
    static const ::google::protobuf::internal::LazyString _i_give_permission_to_break_this_code_default_alpha_;
    ::google::protobuf::internal::ArenaStringPtr alpha_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_compizconfig_2eproto;
};
// -------------------------------------------------------------------

class PluginInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:metadata.PluginInfo) */ {
 public:
  inline PluginInfo() : PluginInfo(nullptr) {}
  ~PluginInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PluginInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PluginInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PluginInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline PluginInfo(const PluginInfo& from) : PluginInfo(nullptr, from) {}
  inline PluginInfo(PluginInfo&& from) noexcept
      : PluginInfo(nullptr, std::move(from)) {}
  inline PluginInfo& operator=(const PluginInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PluginInfo& operator=(PluginInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PluginInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PluginInfo* internal_default_instance() {
    return reinterpret_cast<const PluginInfo*>(
        &_PluginInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(PluginInfo& a, PluginInfo& b) { a.Swap(&b); }
  inline void Swap(PluginInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PluginInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PluginInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PluginInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PluginInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PluginInfo& from) { PluginInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PluginInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "metadata.PluginInfo"; }

 protected:
  explicit PluginInfo(::google::protobuf::Arena* arena);
  PluginInfo(::google::protobuf::Arena* arena, const PluginInfo& from);
  PluginInfo(::google::protobuf::Arena* arena, PluginInfo&& from) noexcept
      : PluginInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Dependencies = PluginInfo_Dependencies;

  // accessors -------------------------------------------------------
  enum : int {
    kFeatureFieldNumber = 10,
    kLocaleFieldNumber = 2,
    kNameFieldNumber = 6,
    kShortDescFieldNumber = 7,
    kLongDescFieldNumber = 8,
    kCategoryFieldNumber = 9,
    kDepsFieldNumber = 11,
    kTimeFieldNumber = 3,
    kPbAbiVersionFieldNumber = 1,
    kBriefMetadataFieldNumber = 4,
    kBasicMetadataFieldNumber = 5,
  };
  // repeated string feature = 10;
  int feature_size() const;
  private:
  int _internal_feature_size() const;

  public:
  void clear_feature() ;
  const std::string& feature(int index) const;
  std::string* mutable_feature(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_feature(int index, Arg_&& value, Args_... args);
  std::string* add_feature();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_feature(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& feature() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_feature();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_feature() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_feature();

  public:
  // required string locale = 2;
  bool has_locale() const;
  void clear_locale() ;
  const std::string& locale() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_locale(Arg_&& arg, Args_... args);
  std::string* mutable_locale();
  PROTOBUF_NODISCARD std::string* release_locale();
  void set_allocated_locale(std::string* value);

  private:
  const std::string& _internal_locale() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_locale(
      const std::string& value);
  std::string* _internal_mutable_locale();

  public:
  // required string name = 6;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional string short_desc = 7;
  bool has_short_desc() const;
  void clear_short_desc() ;
  const std::string& short_desc() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_short_desc(Arg_&& arg, Args_... args);
  std::string* mutable_short_desc();
  PROTOBUF_NODISCARD std::string* release_short_desc();
  void set_allocated_short_desc(std::string* value);

  private:
  const std::string& _internal_short_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_short_desc(
      const std::string& value);
  std::string* _internal_mutable_short_desc();

  public:
  // optional string long_desc = 8;
  bool has_long_desc() const;
  void clear_long_desc() ;
  const std::string& long_desc() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_long_desc(Arg_&& arg, Args_... args);
  std::string* mutable_long_desc();
  PROTOBUF_NODISCARD std::string* release_long_desc();
  void set_allocated_long_desc(std::string* value);

  private:
  const std::string& _internal_long_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_long_desc(
      const std::string& value);
  std::string* _internal_mutable_long_desc();

  public:
  // optional string category = 9;
  bool has_category() const;
  void clear_category() ;
  const std::string& category() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_category(Arg_&& arg, Args_... args);
  std::string* mutable_category();
  PROTOBUF_NODISCARD std::string* release_category();
  void set_allocated_category(std::string* value);

  private:
  const std::string& _internal_category() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_category(
      const std::string& value);
  std::string* _internal_mutable_category();

  public:
  // optional .metadata.PluginInfo.Dependencies deps = 11;
  bool has_deps() const;
  void clear_deps() ;
  const ::metadata::PluginInfo_Dependencies& deps() const;
  PROTOBUF_NODISCARD ::metadata::PluginInfo_Dependencies* release_deps();
  ::metadata::PluginInfo_Dependencies* mutable_deps();
  void set_allocated_deps(::metadata::PluginInfo_Dependencies* value);
  void unsafe_arena_set_allocated_deps(::metadata::PluginInfo_Dependencies* value);
  ::metadata::PluginInfo_Dependencies* unsafe_arena_release_deps();

  private:
  const ::metadata::PluginInfo_Dependencies& _internal_deps() const;
  ::metadata::PluginInfo_Dependencies* _internal_mutable_deps();

  public:
  // required uint64 time = 3;
  bool has_time() const;
  void clear_time() ;
  ::uint64_t time() const;
  void set_time(::uint64_t value);

  private:
  ::uint64_t _internal_time() const;
  void _internal_set_time(::uint64_t value);

  public:
  // required sint32 pb_abi_version = 1;
  bool has_pb_abi_version() const;
  void clear_pb_abi_version() ;
  ::int32_t pb_abi_version() const;
  void set_pb_abi_version(::int32_t value);

  private:
  ::int32_t _internal_pb_abi_version() const;
  void _internal_set_pb_abi_version(::int32_t value);

  public:
  // required bool brief_metadata = 4;
  bool has_brief_metadata() const;
  void clear_brief_metadata() ;
  bool brief_metadata() const;
  void set_brief_metadata(bool value);

  private:
  bool _internal_brief_metadata() const;
  void _internal_set_brief_metadata(bool value);

  public:
  // required bool basic_metadata = 5;
  bool has_basic_metadata() const;
  void clear_basic_metadata() ;
  bool basic_metadata() const;
  void set_basic_metadata(bool value);

  private:
  bool _internal_basic_metadata() const;
  void _internal_set_basic_metadata(bool value);

  public:
  // @@protoc_insertion_point(class_scope:metadata.PluginInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 1,
      80, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PluginInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> feature_;
    ::google::protobuf::internal::ArenaStringPtr locale_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr short_desc_;
    ::google::protobuf::internal::ArenaStringPtr long_desc_;
    ::google::protobuf::internal::ArenaStringPtr category_;
    ::metadata::PluginInfo_Dependencies* deps_;
    ::uint64_t time_;
    ::int32_t pb_abi_version_;
    bool brief_metadata_;
    bool basic_metadata_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_compizconfig_2eproto;
};
// -------------------------------------------------------------------

class Plugin_Option_GenericValue final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:metadata.Plugin.Option.GenericValue) */ {
 public:
  inline Plugin_Option_GenericValue() : Plugin_Option_GenericValue(nullptr) {}
  ~Plugin_Option_GenericValue() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Plugin_Option_GenericValue* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Plugin_Option_GenericValue));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Plugin_Option_GenericValue(
      ::google::protobuf::internal::ConstantInitialized);

  inline Plugin_Option_GenericValue(const Plugin_Option_GenericValue& from) : Plugin_Option_GenericValue(nullptr, from) {}
  inline Plugin_Option_GenericValue(Plugin_Option_GenericValue&& from) noexcept
      : Plugin_Option_GenericValue(nullptr, std::move(from)) {}
  inline Plugin_Option_GenericValue& operator=(const Plugin_Option_GenericValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline Plugin_Option_GenericValue& operator=(Plugin_Option_GenericValue&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Plugin_Option_GenericValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const Plugin_Option_GenericValue* internal_default_instance() {
    return reinterpret_cast<const Plugin_Option_GenericValue*>(
        &_Plugin_Option_GenericValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Plugin_Option_GenericValue& a, Plugin_Option_GenericValue& b) { a.Swap(&b); }
  inline void Swap(Plugin_Option_GenericValue* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Plugin_Option_GenericValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Plugin_Option_GenericValue* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Plugin_Option_GenericValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Plugin_Option_GenericValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Plugin_Option_GenericValue& from) { Plugin_Option_GenericValue::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Plugin_Option_GenericValue* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "metadata.Plugin.Option.GenericValue"; }

 protected:
  explicit Plugin_Option_GenericValue(::google::protobuf::Arena* arena);
  Plugin_Option_GenericValue(::google::protobuf::Arena* arena, const Plugin_Option_GenericValue& from);
  Plugin_Option_GenericValue(::google::protobuf::Arena* arena, Plugin_Option_GenericValue&& from) noexcept
      : Plugin_Option_GenericValue(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStringValueFieldNumber = 6,
    kColorValueFieldNumber = 4,
    kBoolValueFieldNumber = 1,
    kIntValueFieldNumber = 2,
    kFloatValueFieldNumber = 3,
    kEdgeValueFieldNumber = 5,
  };
  // optional string string_value = 6;
  bool has_string_value() const;
  void clear_string_value() ;
  const std::string& string_value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_string_value(Arg_&& arg, Args_... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* value);

  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(
      const std::string& value);
  std::string* _internal_mutable_string_value();

  public:
  // optional .metadata.Plugin.Option.ColorValue color_value = 4;
  bool has_color_value() const;
  void clear_color_value() ;
  const ::metadata::Plugin_Option_ColorValue& color_value() const;
  PROTOBUF_NODISCARD ::metadata::Plugin_Option_ColorValue* release_color_value();
  ::metadata::Plugin_Option_ColorValue* mutable_color_value();
  void set_allocated_color_value(::metadata::Plugin_Option_ColorValue* value);
  void unsafe_arena_set_allocated_color_value(::metadata::Plugin_Option_ColorValue* value);
  ::metadata::Plugin_Option_ColorValue* unsafe_arena_release_color_value();

  private:
  const ::metadata::Plugin_Option_ColorValue& _internal_color_value() const;
  ::metadata::Plugin_Option_ColorValue* _internal_mutable_color_value();

  public:
  // optional bool bool_value = 1;
  bool has_bool_value() const;
  void clear_bool_value() ;
  bool bool_value() const;
  void set_bool_value(bool value);

  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);

  public:
  // optional sint32 int_value = 2;
  bool has_int_value() const;
  void clear_int_value() ;
  ::int32_t int_value() const;
  void set_int_value(::int32_t value);

  private:
  ::int32_t _internal_int_value() const;
  void _internal_set_int_value(::int32_t value);

  public:
  // optional float float_value = 3;
  bool has_float_value() const;
  void clear_float_value() ;
  float float_value() const;
  void set_float_value(float value);

  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);

  public:
  // optional uint32 edge_value = 5;
  bool has_edge_value() const;
  void clear_edge_value() ;
  ::uint32_t edge_value() const;
  void set_edge_value(::uint32_t value);

  private:
  ::uint32_t _internal_edge_value() const;
  void _internal_set_edge_value(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:metadata.Plugin.Option.GenericValue)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      56, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Plugin_Option_GenericValue& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr string_value_;
    ::metadata::Plugin_Option_ColorValue* color_value_;
    bool bool_value_;
    ::int32_t int_value_;
    float float_value_;
    ::uint32_t edge_value_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_compizconfig_2eproto;
};
// -------------------------------------------------------------------

class Plugin_Extension final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:metadata.Plugin.Extension) */ {
 public:
  inline Plugin_Extension() : Plugin_Extension(nullptr) {}
  ~Plugin_Extension() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Plugin_Extension* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Plugin_Extension));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Plugin_Extension(
      ::google::protobuf::internal::ConstantInitialized);

  inline Plugin_Extension(const Plugin_Extension& from) : Plugin_Extension(nullptr, from) {}
  inline Plugin_Extension(Plugin_Extension&& from) noexcept
      : Plugin_Extension(nullptr, std::move(from)) {}
  inline Plugin_Extension& operator=(const Plugin_Extension& from) {
    CopyFrom(from);
    return *this;
  }
  inline Plugin_Extension& operator=(Plugin_Extension&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Plugin_Extension& default_instance() {
    return *internal_default_instance();
  }
  static inline const Plugin_Extension* internal_default_instance() {
    return reinterpret_cast<const Plugin_Extension*>(
        &_Plugin_Extension_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(Plugin_Extension& a, Plugin_Extension& b) { a.Swap(&b); }
  inline void Swap(Plugin_Extension* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Plugin_Extension* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Plugin_Extension* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Plugin_Extension>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Plugin_Extension& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Plugin_Extension& from) { Plugin_Extension::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Plugin_Extension* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "metadata.Plugin.Extension"; }

 protected:
  explicit Plugin_Extension(::google::protobuf::Arena* arena);
  Plugin_Extension(::google::protobuf::Arena* arena, const Plugin_Extension& from);
  Plugin_Extension(::google::protobuf::Arena* arena, Plugin_Extension&& from) noexcept
      : Plugin_Extension(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBaseOptionFieldNumber = 2,
    kStrRestrictionFieldNumber = 3,
    kBasePluginFieldNumber = 1,
  };
  // repeated string base_option = 2;
  int base_option_size() const;
  private:
  int _internal_base_option_size() const;

  public:
  void clear_base_option() ;
  const std::string& base_option(int index) const;
  std::string* mutable_base_option(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_base_option(int index, Arg_&& value, Args_... args);
  std::string* add_base_option();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_base_option(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& base_option() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_base_option();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_base_option() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_base_option();

  public:
  // repeated .metadata.Plugin.Option.StringRestriction str_restriction = 3;
  int str_restriction_size() const;
  private:
  int _internal_str_restriction_size() const;

  public:
  void clear_str_restriction() ;
  ::metadata::Plugin_Option_StringRestriction* mutable_str_restriction(int index);
  ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_StringRestriction>* mutable_str_restriction();

  private:
  const ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_StringRestriction>& _internal_str_restriction() const;
  ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_StringRestriction>* _internal_mutable_str_restriction();
  public:
  const ::metadata::Plugin_Option_StringRestriction& str_restriction(int index) const;
  ::metadata::Plugin_Option_StringRestriction* add_str_restriction();
  const ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_StringRestriction>& str_restriction() const;
  // required string base_plugin = 1;
  bool has_base_plugin() const;
  void clear_base_plugin() ;
  const std::string& base_plugin() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_base_plugin(Arg_&& arg, Args_... args);
  std::string* mutable_base_plugin();
  PROTOBUF_NODISCARD std::string* release_base_plugin();
  void set_allocated_base_plugin(std::string* value);

  private:
  const std::string& _internal_base_plugin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base_plugin(
      const std::string& value);
  std::string* _internal_mutable_base_plugin();

  public:
  // @@protoc_insertion_point(class_scope:metadata.Plugin.Extension)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      56, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Plugin_Extension& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> base_option_;
    ::google::protobuf::RepeatedPtrField< ::metadata::Plugin_Option_StringRestriction > str_restriction_;
    ::google::protobuf::internal::ArenaStringPtr base_plugin_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_compizconfig_2eproto;
};
// -------------------------------------------------------------------

class PluginBrief final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:metadata.PluginBrief) */ {
 public:
  inline PluginBrief() : PluginBrief(nullptr) {}
  ~PluginBrief() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PluginBrief* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PluginBrief));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PluginBrief(
      ::google::protobuf::internal::ConstantInitialized);

  inline PluginBrief(const PluginBrief& from) : PluginBrief(nullptr, from) {}
  inline PluginBrief(PluginBrief&& from) noexcept
      : PluginBrief(nullptr, std::move(from)) {}
  inline PluginBrief& operator=(const PluginBrief& from) {
    CopyFrom(from);
    return *this;
  }
  inline PluginBrief& operator=(PluginBrief&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PluginBrief& default_instance() {
    return *internal_default_instance();
  }
  static inline const PluginBrief* internal_default_instance() {
    return reinterpret_cast<const PluginBrief*>(
        &_PluginBrief_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(PluginBrief& a, PluginBrief& b) { a.Swap(&b); }
  inline void Swap(PluginBrief* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PluginBrief* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PluginBrief* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PluginBrief>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PluginBrief& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PluginBrief& from) { PluginBrief::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PluginBrief* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "metadata.PluginBrief"; }

 protected:
  explicit PluginBrief(::google::protobuf::Arena* arena);
  PluginBrief(::google::protobuf::Arena* arena, const PluginBrief& from);
  PluginBrief(::google::protobuf::Arena* arena, PluginBrief&& from) noexcept
      : PluginBrief(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInfoFieldNumber = 1,
  };
  // required .metadata.PluginInfo info = 1;
  bool has_info() const;
  void clear_info() ;
  const ::metadata::PluginInfo& info() const;
  PROTOBUF_NODISCARD ::metadata::PluginInfo* release_info();
  ::metadata::PluginInfo* mutable_info();
  void set_allocated_info(::metadata::PluginInfo* value);
  void unsafe_arena_set_allocated_info(::metadata::PluginInfo* value);
  ::metadata::PluginInfo* unsafe_arena_release_info();

  private:
  const ::metadata::PluginInfo& _internal_info() const;
  ::metadata::PluginInfo* _internal_mutable_info();

  public:
  // @@protoc_insertion_point(class_scope:metadata.PluginBrief)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PluginBrief& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::metadata::PluginInfo* info_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_compizconfig_2eproto;
};
// -------------------------------------------------------------------

class Plugin_Option final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:metadata.Plugin.Option) */ {
 public:
  inline Plugin_Option() : Plugin_Option(nullptr) {}
  ~Plugin_Option() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Plugin_Option* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Plugin_Option));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Plugin_Option(
      ::google::protobuf::internal::ConstantInitialized);

  inline Plugin_Option(const Plugin_Option& from) : Plugin_Option(nullptr, from) {}
  inline Plugin_Option(Plugin_Option&& from) noexcept
      : Plugin_Option(nullptr, std::move(from)) {}
  inline Plugin_Option& operator=(const Plugin_Option& from) {
    CopyFrom(from);
    return *this;
  }
  inline Plugin_Option& operator=(Plugin_Option&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Plugin_Option& default_instance() {
    return *internal_default_instance();
  }
  static inline const Plugin_Option* internal_default_instance() {
    return reinterpret_cast<const Plugin_Option*>(
        &_Plugin_Option_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(Plugin_Option& a, Plugin_Option& b) { a.Swap(&b); }
  inline void Swap(Plugin_Option* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Plugin_Option* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Plugin_Option* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Plugin_Option>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Plugin_Option& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Plugin_Option& from) { Plugin_Option::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Plugin_Option* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "metadata.Plugin.Option"; }

 protected:
  explicit Plugin_Option(::google::protobuf::Arena* arena);
  Plugin_Option(::google::protobuf::Arena* arena, const Plugin_Option& from);
  Plugin_Option(::google::protobuf::Arena* arena, Plugin_Option&& from) noexcept
      : Plugin_Option(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using ColorValue = Plugin_Option_ColorValue;
  using GenericValue = Plugin_Option_GenericValue;
  using IntDescription = Plugin_Option_IntDescription;
  using StringRestriction = Plugin_Option_StringRestriction;
  using Type = Plugin_Option_Type;
  static constexpr Type BOOL = Plugin_Option_Type_BOOL;
  static constexpr Type INT = Plugin_Option_Type_INT;
  static constexpr Type FLOAT = Plugin_Option_Type_FLOAT;
  static constexpr Type STRING = Plugin_Option_Type_STRING;
  static constexpr Type COLOR = Plugin_Option_Type_COLOR;
  static constexpr Type ACTION = Plugin_Option_Type_ACTION;
  static constexpr Type KEY = Plugin_Option_Type_KEY;
  static constexpr Type BUTTON = Plugin_Option_Type_BUTTON;
  static constexpr Type EDGE = Plugin_Option_Type_EDGE;
  static constexpr Type BELL = Plugin_Option_Type_BELL;
  static constexpr Type MATCH = Plugin_Option_Type_MATCH;
  static constexpr Type LIST = Plugin_Option_Type_LIST;
  static inline bool Type_IsValid(int value) {
    return Plugin_Option_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = Plugin_Option_Type_Type_MIN;
  static constexpr Type Type_MAX = Plugin_Option_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = Plugin_Option_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Type_descriptor() {
    return Plugin_Option_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return Plugin_Option_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return Plugin_Option_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kDefaultValueFieldNumber = 11,
    kIntDescFieldNumber = 14,
    kStrRestrictionFieldNumber = 18,
    kNameFieldNumber = 1,
    kShortDescFieldNumber = 4,
    kLongDescFieldNumber = 5,
    kHintsFieldNumber = 19,
    kTypeFieldNumber = 2,
    kListTypeFieldNumber = 3,
    kIntMinFieldNumber = 12,
    kIntMaxFieldNumber = 13,
    kReadOnlyFieldNumber = 8,
    kExtensibleFieldNumber = 9,
    kPassiveGrabFieldNumber = 20,
    kInternalFieldNumber = 21,
    kFloatMinFieldNumber = 15,
    kFloatMaxFieldNumber = 16,
    kPrecisionFieldNumber = 17,
    kNodelayFieldNumber = 22,
    kSortStartFieldNumber = 10,
    kGroupIdFieldNumber = 6,
    kSubgroupIdFieldNumber = 7,
  };
  // repeated .metadata.Plugin.Option.GenericValue default_value = 11;
  int default_value_size() const;
  private:
  int _internal_default_value_size() const;

  public:
  void clear_default_value() ;
  ::metadata::Plugin_Option_GenericValue* mutable_default_value(int index);
  ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_GenericValue>* mutable_default_value();

  private:
  const ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_GenericValue>& _internal_default_value() const;
  ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_GenericValue>* _internal_mutable_default_value();
  public:
  const ::metadata::Plugin_Option_GenericValue& default_value(int index) const;
  ::metadata::Plugin_Option_GenericValue* add_default_value();
  const ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_GenericValue>& default_value() const;
  // repeated .metadata.Plugin.Option.IntDescription int_desc = 14;
  int int_desc_size() const;
  private:
  int _internal_int_desc_size() const;

  public:
  void clear_int_desc() ;
  ::metadata::Plugin_Option_IntDescription* mutable_int_desc(int index);
  ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_IntDescription>* mutable_int_desc();

  private:
  const ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_IntDescription>& _internal_int_desc() const;
  ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_IntDescription>* _internal_mutable_int_desc();
  public:
  const ::metadata::Plugin_Option_IntDescription& int_desc(int index) const;
  ::metadata::Plugin_Option_IntDescription* add_int_desc();
  const ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_IntDescription>& int_desc() const;
  // repeated .metadata.Plugin.Option.StringRestriction str_restriction = 18;
  int str_restriction_size() const;
  private:
  int _internal_str_restriction_size() const;

  public:
  void clear_str_restriction() ;
  ::metadata::Plugin_Option_StringRestriction* mutable_str_restriction(int index);
  ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_StringRestriction>* mutable_str_restriction();

  private:
  const ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_StringRestriction>& _internal_str_restriction() const;
  ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_StringRestriction>* _internal_mutable_str_restriction();
  public:
  const ::metadata::Plugin_Option_StringRestriction& str_restriction(int index) const;
  ::metadata::Plugin_Option_StringRestriction* add_str_restriction();
  const ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_StringRestriction>& str_restriction() const;
  // required string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional string short_desc = 4;
  bool has_short_desc() const;
  void clear_short_desc() ;
  const std::string& short_desc() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_short_desc(Arg_&& arg, Args_... args);
  std::string* mutable_short_desc();
  PROTOBUF_NODISCARD std::string* release_short_desc();
  void set_allocated_short_desc(std::string* value);

  private:
  const std::string& _internal_short_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_short_desc(
      const std::string& value);
  std::string* _internal_mutable_short_desc();

  public:
  // optional string long_desc = 5;
  bool has_long_desc() const;
  void clear_long_desc() ;
  const std::string& long_desc() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_long_desc(Arg_&& arg, Args_... args);
  std::string* mutable_long_desc();
  PROTOBUF_NODISCARD std::string* release_long_desc();
  void set_allocated_long_desc(std::string* value);

  private:
  const std::string& _internal_long_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_long_desc(
      const std::string& value);
  std::string* _internal_mutable_long_desc();

  public:
  // optional string hints = 19;
  bool has_hints() const;
  void clear_hints() ;
  const std::string& hints() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hints(Arg_&& arg, Args_... args);
  std::string* mutable_hints();
  PROTOBUF_NODISCARD std::string* release_hints();
  void set_allocated_hints(std::string* value);

  private:
  const std::string& _internal_hints() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hints(
      const std::string& value);
  std::string* _internal_mutable_hints();

  public:
  // required .metadata.Plugin.Option.Type type = 2;
  bool has_type() const;
  void clear_type() ;
  ::metadata::Plugin_Option_Type type() const;
  void set_type(::metadata::Plugin_Option_Type value);

  private:
  ::metadata::Plugin_Option_Type _internal_type() const;
  void _internal_set_type(::metadata::Plugin_Option_Type value);

  public:
  // optional .metadata.Plugin.Option.Type list_type = 3;
  bool has_list_type() const;
  void clear_list_type() ;
  ::metadata::Plugin_Option_Type list_type() const;
  void set_list_type(::metadata::Plugin_Option_Type value);

  private:
  ::metadata::Plugin_Option_Type _internal_list_type() const;
  void _internal_set_list_type(::metadata::Plugin_Option_Type value);

  public:
  // optional sint32 int_min = 12;
  bool has_int_min() const;
  void clear_int_min() ;
  ::int32_t int_min() const;
  void set_int_min(::int32_t value);

  private:
  ::int32_t _internal_int_min() const;
  void _internal_set_int_min(::int32_t value);

  public:
  // optional sint32 int_max = 13;
  bool has_int_max() const;
  void clear_int_max() ;
  ::int32_t int_max() const;
  void set_int_max(::int32_t value);

  private:
  ::int32_t _internal_int_max() const;
  void _internal_set_int_max(::int32_t value);

  public:
  // optional bool read_only = 8;
  bool has_read_only() const;
  void clear_read_only() ;
  bool read_only() const;
  void set_read_only(bool value);

  private:
  bool _internal_read_only() const;
  void _internal_set_read_only(bool value);

  public:
  // optional bool extensible = 9;
  bool has_extensible() const;
  void clear_extensible() ;
  bool extensible() const;
  void set_extensible(bool value);

  private:
  bool _internal_extensible() const;
  void _internal_set_extensible(bool value);

  public:
  // optional bool passive_grab = 20;
  bool has_passive_grab() const;
  void clear_passive_grab() ;
  bool passive_grab() const;
  void set_passive_grab(bool value);

  private:
  bool _internal_passive_grab() const;
  void _internal_set_passive_grab(bool value);

  public:
  // optional bool internal = 21;
  bool has_internal() const;
  void clear_internal() ;
  bool internal() const;
  void set_internal(bool value);

  private:
  bool _internal_internal() const;
  void _internal_set_internal(bool value);

  public:
  // optional float float_min = 15;
  bool has_float_min() const;
  void clear_float_min() ;
  float float_min() const;
  void set_float_min(float value);

  private:
  float _internal_float_min() const;
  void _internal_set_float_min(float value);

  public:
  // optional float float_max = 16;
  bool has_float_max() const;
  void clear_float_max() ;
  float float_max() const;
  void set_float_max(float value);

  private:
  float _internal_float_max() const;
  void _internal_set_float_max(float value);

  public:
  // optional float precision = 17;
  bool has_precision() const;
  void clear_precision() ;
  float precision() const;
  void set_precision(float value);

  private:
  float _internal_precision() const;
  void _internal_set_precision(float value);

  public:
  // optional bool nodelay = 22;
  bool has_nodelay() const;
  void clear_nodelay() ;
  bool nodelay() const;
  void set_nodelay(bool value);

  private:
  bool _internal_nodelay() const;
  void _internal_set_nodelay(bool value);

  public:
  // optional sint32 sort_start = 10 [default = -1];
  bool has_sort_start() const;
  void clear_sort_start() ;
  ::int32_t sort_start() const;
  void set_sort_start(::int32_t value);

  private:
  ::int32_t _internal_sort_start() const;
  void _internal_set_sort_start(::int32_t value);

  public:
  // optional sint32 group_id = 6 [default = -1];
  bool has_group_id() const;
  void clear_group_id() ;
  ::int32_t group_id() const;
  void set_group_id(::int32_t value);

  private:
  ::int32_t _internal_group_id() const;
  void _internal_set_group_id(::int32_t value);

  public:
  // optional sint32 subgroup_id = 7 [default = -1];
  bool has_subgroup_id() const;
  void clear_subgroup_id() ;
  ::int32_t subgroup_id() const;
  void set_subgroup_id(::int32_t value);

  private:
  ::int32_t _internal_subgroup_id() const;
  void _internal_set_subgroup_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:metadata.Plugin.Option)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 22, 5,
      75, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Plugin_Option& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::metadata::Plugin_Option_GenericValue > default_value_;
    ::google::protobuf::RepeatedPtrField< ::metadata::Plugin_Option_IntDescription > int_desc_;
    ::google::protobuf::RepeatedPtrField< ::metadata::Plugin_Option_StringRestriction > str_restriction_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr short_desc_;
    ::google::protobuf::internal::ArenaStringPtr long_desc_;
    ::google::protobuf::internal::ArenaStringPtr hints_;
    int type_;
    int list_type_;
    ::int32_t int_min_;
    ::int32_t int_max_;
    bool read_only_;
    bool extensible_;
    bool passive_grab_;
    bool internal_;
    float float_min_;
    float float_max_;
    float precision_;
    bool nodelay_;
    ::int32_t sort_start_;
    ::int32_t group_id_;
    ::int32_t subgroup_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_compizconfig_2eproto;
};
// -------------------------------------------------------------------

class Plugin_Screen final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:metadata.Plugin.Screen) */ {
 public:
  inline Plugin_Screen() : Plugin_Screen(nullptr) {}
  ~Plugin_Screen() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Plugin_Screen* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Plugin_Screen));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Plugin_Screen(
      ::google::protobuf::internal::ConstantInitialized);

  inline Plugin_Screen(const Plugin_Screen& from) : Plugin_Screen(nullptr, from) {}
  inline Plugin_Screen(Plugin_Screen&& from) noexcept
      : Plugin_Screen(nullptr, std::move(from)) {}
  inline Plugin_Screen& operator=(const Plugin_Screen& from) {
    CopyFrom(from);
    return *this;
  }
  inline Plugin_Screen& operator=(Plugin_Screen&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Plugin_Screen& default_instance() {
    return *internal_default_instance();
  }
  static inline const Plugin_Screen* internal_default_instance() {
    return reinterpret_cast<const Plugin_Screen*>(
        &_Plugin_Screen_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(Plugin_Screen& a, Plugin_Screen& b) { a.Swap(&b); }
  inline void Swap(Plugin_Screen* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Plugin_Screen* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Plugin_Screen* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Plugin_Screen>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Plugin_Screen& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Plugin_Screen& from) { Plugin_Screen::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Plugin_Screen* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "metadata.Plugin.Screen"; }

 protected:
  explicit Plugin_Screen(::google::protobuf::Arena* arena);
  Plugin_Screen(::google::protobuf::Arena* arena, const Plugin_Screen& from);
  Plugin_Screen(::google::protobuf::Arena* arena, Plugin_Screen&& from) noexcept
      : Plugin_Screen(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOptionFieldNumber = 1,
    kGroupDescFieldNumber = 2,
    kSubgroupDescFieldNumber = 3,
  };
  // repeated .metadata.Plugin.Option option = 1;
  int option_size() const;
  private:
  int _internal_option_size() const;

  public:
  void clear_option() ;
  ::metadata::Plugin_Option* mutable_option(int index);
  ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option>* mutable_option();

  private:
  const ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option>& _internal_option() const;
  ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option>* _internal_mutable_option();
  public:
  const ::metadata::Plugin_Option& option(int index) const;
  ::metadata::Plugin_Option* add_option();
  const ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option>& option() const;
  // repeated string group_desc = 2;
  int group_desc_size() const;
  private:
  int _internal_group_desc_size() const;

  public:
  void clear_group_desc() ;
  const std::string& group_desc(int index) const;
  std::string* mutable_group_desc(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_group_desc(int index, Arg_&& value, Args_... args);
  std::string* add_group_desc();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_group_desc(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& group_desc() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_group_desc();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_group_desc() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_group_desc();

  public:
  // repeated string subgroup_desc = 3;
  int subgroup_desc_size() const;
  private:
  int _internal_subgroup_desc_size() const;

  public:
  void clear_subgroup_desc() ;
  const std::string& subgroup_desc(int index) const;
  std::string* mutable_subgroup_desc(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subgroup_desc(int index, Arg_&& value, Args_... args);
  std::string* add_subgroup_desc();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_subgroup_desc(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& subgroup_desc() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_subgroup_desc();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_subgroup_desc() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_subgroup_desc();

  public:
  // @@protoc_insertion_point(class_scope:metadata.Plugin.Screen)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      54, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Plugin_Screen& from_msg);
    ::google::protobuf::RepeatedPtrField< ::metadata::Plugin_Option > option_;
    ::google::protobuf::RepeatedPtrField<std::string> group_desc_;
    ::google::protobuf::RepeatedPtrField<std::string> subgroup_desc_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_compizconfig_2eproto;
};
// -------------------------------------------------------------------

class Plugin final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:metadata.Plugin) */ {
 public:
  inline Plugin() : Plugin(nullptr) {}
  ~Plugin() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Plugin* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Plugin));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Plugin(
      ::google::protobuf::internal::ConstantInitialized);

  inline Plugin(const Plugin& from) : Plugin(nullptr, from) {}
  inline Plugin(Plugin&& from) noexcept
      : Plugin(nullptr, std::move(from)) {}
  inline Plugin& operator=(const Plugin& from) {
    CopyFrom(from);
    return *this;
  }
  inline Plugin& operator=(Plugin&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Plugin& default_instance() {
    return *internal_default_instance();
  }
  static inline const Plugin* internal_default_instance() {
    return reinterpret_cast<const Plugin*>(
        &_Plugin_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(Plugin& a, Plugin& b) { a.Swap(&b); }
  inline void Swap(Plugin* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Plugin* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Plugin* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Plugin>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Plugin& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Plugin& from) { Plugin::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Plugin* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "metadata.Plugin"; }

 protected:
  explicit Plugin(::google::protobuf::Arena* arena);
  Plugin(::google::protobuf::Arena* arena, const Plugin& from);
  Plugin(::google::protobuf::Arena* arena, Plugin&& from) noexcept
      : Plugin(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Option = Plugin_Option;
  using Extension = Plugin_Extension;
  using Screen = Plugin_Screen;

  // accessors -------------------------------------------------------
  enum : int {
    kExtensionFieldNumber = 3,
    kInfoFieldNumber = 1,
    kScreenFieldNumber = 2,
  };
  // repeated .metadata.Plugin.Extension extension = 3;
  int extension_size() const;
  private:
  int _internal_extension_size() const;

  public:
  void clear_extension() ;
  ::metadata::Plugin_Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Extension>* mutable_extension();

  private:
  const ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Extension>& _internal_extension() const;
  ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Extension>* _internal_mutable_extension();
  public:
  const ::metadata::Plugin_Extension& extension(int index) const;
  ::metadata::Plugin_Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Extension>& extension() const;
  // required .metadata.PluginInfo info = 1;
  bool has_info() const;
  void clear_info() ;
  const ::metadata::PluginInfo& info() const;
  PROTOBUF_NODISCARD ::metadata::PluginInfo* release_info();
  ::metadata::PluginInfo* mutable_info();
  void set_allocated_info(::metadata::PluginInfo* value);
  void unsafe_arena_set_allocated_info(::metadata::PluginInfo* value);
  ::metadata::PluginInfo* unsafe_arena_release_info();

  private:
  const ::metadata::PluginInfo& _internal_info() const;
  ::metadata::PluginInfo* _internal_mutable_info();

  public:
  // optional .metadata.Plugin.Screen screen = 2;
  bool has_screen() const;
  void clear_screen() ;
  const ::metadata::Plugin_Screen& screen() const;
  PROTOBUF_NODISCARD ::metadata::Plugin_Screen* release_screen();
  ::metadata::Plugin_Screen* mutable_screen();
  void set_allocated_screen(::metadata::Plugin_Screen* value);
  void unsafe_arena_set_allocated_screen(::metadata::Plugin_Screen* value);
  ::metadata::Plugin_Screen* unsafe_arena_release_screen();

  private:
  const ::metadata::Plugin_Screen& _internal_screen() const;
  ::metadata::Plugin_Screen* _internal_mutable_screen();

  public:
  // @@protoc_insertion_point(class_scope:metadata.Plugin)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Plugin& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::metadata::Plugin_Extension > extension_;
    ::metadata::PluginInfo* info_;
    ::metadata::Plugin_Screen* screen_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_compizconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PluginInfo_Dependencies

// repeated string after_plugin = 1;
inline int PluginInfo_Dependencies::_internal_after_plugin_size() const {
  return _internal_after_plugin().size();
}
inline int PluginInfo_Dependencies::after_plugin_size() const {
  return _internal_after_plugin_size();
}
inline void PluginInfo_Dependencies::clear_after_plugin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.after_plugin_.Clear();
}
inline std::string* PluginInfo_Dependencies::add_after_plugin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_after_plugin()->Add();
  // @@protoc_insertion_point(field_add_mutable:metadata.PluginInfo.Dependencies.after_plugin)
  return _s;
}
inline const std::string& PluginInfo_Dependencies::after_plugin(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.PluginInfo.Dependencies.after_plugin)
  return _internal_after_plugin().Get(index);
}
inline std::string* PluginInfo_Dependencies::mutable_after_plugin(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:metadata.PluginInfo.Dependencies.after_plugin)
  return _internal_mutable_after_plugin()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void PluginInfo_Dependencies::set_after_plugin(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_after_plugin()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:metadata.PluginInfo.Dependencies.after_plugin)
}
template <typename Arg_, typename... Args_>
inline void PluginInfo_Dependencies::add_after_plugin(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_after_plugin(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:metadata.PluginInfo.Dependencies.after_plugin)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PluginInfo_Dependencies::after_plugin() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:metadata.PluginInfo.Dependencies.after_plugin)
  return _internal_after_plugin();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PluginInfo_Dependencies::mutable_after_plugin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:metadata.PluginInfo.Dependencies.after_plugin)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_after_plugin();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PluginInfo_Dependencies::_internal_after_plugin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.after_plugin_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PluginInfo_Dependencies::_internal_mutable_after_plugin() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.after_plugin_;
}

// repeated string before_plugin = 2;
inline int PluginInfo_Dependencies::_internal_before_plugin_size() const {
  return _internal_before_plugin().size();
}
inline int PluginInfo_Dependencies::before_plugin_size() const {
  return _internal_before_plugin_size();
}
inline void PluginInfo_Dependencies::clear_before_plugin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.before_plugin_.Clear();
}
inline std::string* PluginInfo_Dependencies::add_before_plugin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_before_plugin()->Add();
  // @@protoc_insertion_point(field_add_mutable:metadata.PluginInfo.Dependencies.before_plugin)
  return _s;
}
inline const std::string& PluginInfo_Dependencies::before_plugin(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.PluginInfo.Dependencies.before_plugin)
  return _internal_before_plugin().Get(index);
}
inline std::string* PluginInfo_Dependencies::mutable_before_plugin(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:metadata.PluginInfo.Dependencies.before_plugin)
  return _internal_mutable_before_plugin()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void PluginInfo_Dependencies::set_before_plugin(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_before_plugin()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:metadata.PluginInfo.Dependencies.before_plugin)
}
template <typename Arg_, typename... Args_>
inline void PluginInfo_Dependencies::add_before_plugin(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_before_plugin(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:metadata.PluginInfo.Dependencies.before_plugin)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PluginInfo_Dependencies::before_plugin() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:metadata.PluginInfo.Dependencies.before_plugin)
  return _internal_before_plugin();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PluginInfo_Dependencies::mutable_before_plugin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:metadata.PluginInfo.Dependencies.before_plugin)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_before_plugin();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PluginInfo_Dependencies::_internal_before_plugin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.before_plugin_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PluginInfo_Dependencies::_internal_mutable_before_plugin() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.before_plugin_;
}

// repeated string require_plugin = 3;
inline int PluginInfo_Dependencies::_internal_require_plugin_size() const {
  return _internal_require_plugin().size();
}
inline int PluginInfo_Dependencies::require_plugin_size() const {
  return _internal_require_plugin_size();
}
inline void PluginInfo_Dependencies::clear_require_plugin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.require_plugin_.Clear();
}
inline std::string* PluginInfo_Dependencies::add_require_plugin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_require_plugin()->Add();
  // @@protoc_insertion_point(field_add_mutable:metadata.PluginInfo.Dependencies.require_plugin)
  return _s;
}
inline const std::string& PluginInfo_Dependencies::require_plugin(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.PluginInfo.Dependencies.require_plugin)
  return _internal_require_plugin().Get(index);
}
inline std::string* PluginInfo_Dependencies::mutable_require_plugin(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:metadata.PluginInfo.Dependencies.require_plugin)
  return _internal_mutable_require_plugin()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void PluginInfo_Dependencies::set_require_plugin(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_require_plugin()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:metadata.PluginInfo.Dependencies.require_plugin)
}
template <typename Arg_, typename... Args_>
inline void PluginInfo_Dependencies::add_require_plugin(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_require_plugin(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:metadata.PluginInfo.Dependencies.require_plugin)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PluginInfo_Dependencies::require_plugin() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:metadata.PluginInfo.Dependencies.require_plugin)
  return _internal_require_plugin();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PluginInfo_Dependencies::mutable_require_plugin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:metadata.PluginInfo.Dependencies.require_plugin)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_require_plugin();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PluginInfo_Dependencies::_internal_require_plugin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.require_plugin_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PluginInfo_Dependencies::_internal_mutable_require_plugin() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.require_plugin_;
}

// repeated string require_feature = 4;
inline int PluginInfo_Dependencies::_internal_require_feature_size() const {
  return _internal_require_feature().size();
}
inline int PluginInfo_Dependencies::require_feature_size() const {
  return _internal_require_feature_size();
}
inline void PluginInfo_Dependencies::clear_require_feature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.require_feature_.Clear();
}
inline std::string* PluginInfo_Dependencies::add_require_feature() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_require_feature()->Add();
  // @@protoc_insertion_point(field_add_mutable:metadata.PluginInfo.Dependencies.require_feature)
  return _s;
}
inline const std::string& PluginInfo_Dependencies::require_feature(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.PluginInfo.Dependencies.require_feature)
  return _internal_require_feature().Get(index);
}
inline std::string* PluginInfo_Dependencies::mutable_require_feature(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:metadata.PluginInfo.Dependencies.require_feature)
  return _internal_mutable_require_feature()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void PluginInfo_Dependencies::set_require_feature(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_require_feature()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:metadata.PluginInfo.Dependencies.require_feature)
}
template <typename Arg_, typename... Args_>
inline void PluginInfo_Dependencies::add_require_feature(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_require_feature(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:metadata.PluginInfo.Dependencies.require_feature)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PluginInfo_Dependencies::require_feature() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:metadata.PluginInfo.Dependencies.require_feature)
  return _internal_require_feature();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PluginInfo_Dependencies::mutable_require_feature() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:metadata.PluginInfo.Dependencies.require_feature)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_require_feature();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PluginInfo_Dependencies::_internal_require_feature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.require_feature_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PluginInfo_Dependencies::_internal_mutable_require_feature() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.require_feature_;
}

// repeated string conflict_plugin = 5;
inline int PluginInfo_Dependencies::_internal_conflict_plugin_size() const {
  return _internal_conflict_plugin().size();
}
inline int PluginInfo_Dependencies::conflict_plugin_size() const {
  return _internal_conflict_plugin_size();
}
inline void PluginInfo_Dependencies::clear_conflict_plugin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conflict_plugin_.Clear();
}
inline std::string* PluginInfo_Dependencies::add_conflict_plugin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_conflict_plugin()->Add();
  // @@protoc_insertion_point(field_add_mutable:metadata.PluginInfo.Dependencies.conflict_plugin)
  return _s;
}
inline const std::string& PluginInfo_Dependencies::conflict_plugin(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.PluginInfo.Dependencies.conflict_plugin)
  return _internal_conflict_plugin().Get(index);
}
inline std::string* PluginInfo_Dependencies::mutable_conflict_plugin(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:metadata.PluginInfo.Dependencies.conflict_plugin)
  return _internal_mutable_conflict_plugin()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void PluginInfo_Dependencies::set_conflict_plugin(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_conflict_plugin()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:metadata.PluginInfo.Dependencies.conflict_plugin)
}
template <typename Arg_, typename... Args_>
inline void PluginInfo_Dependencies::add_conflict_plugin(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_conflict_plugin(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:metadata.PluginInfo.Dependencies.conflict_plugin)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PluginInfo_Dependencies::conflict_plugin() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:metadata.PluginInfo.Dependencies.conflict_plugin)
  return _internal_conflict_plugin();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PluginInfo_Dependencies::mutable_conflict_plugin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:metadata.PluginInfo.Dependencies.conflict_plugin)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_conflict_plugin();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PluginInfo_Dependencies::_internal_conflict_plugin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conflict_plugin_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PluginInfo_Dependencies::_internal_mutable_conflict_plugin() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.conflict_plugin_;
}

// repeated string conflict_feature = 6;
inline int PluginInfo_Dependencies::_internal_conflict_feature_size() const {
  return _internal_conflict_feature().size();
}
inline int PluginInfo_Dependencies::conflict_feature_size() const {
  return _internal_conflict_feature_size();
}
inline void PluginInfo_Dependencies::clear_conflict_feature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conflict_feature_.Clear();
}
inline std::string* PluginInfo_Dependencies::add_conflict_feature() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_conflict_feature()->Add();
  // @@protoc_insertion_point(field_add_mutable:metadata.PluginInfo.Dependencies.conflict_feature)
  return _s;
}
inline const std::string& PluginInfo_Dependencies::conflict_feature(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.PluginInfo.Dependencies.conflict_feature)
  return _internal_conflict_feature().Get(index);
}
inline std::string* PluginInfo_Dependencies::mutable_conflict_feature(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:metadata.PluginInfo.Dependencies.conflict_feature)
  return _internal_mutable_conflict_feature()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void PluginInfo_Dependencies::set_conflict_feature(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_conflict_feature()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:metadata.PluginInfo.Dependencies.conflict_feature)
}
template <typename Arg_, typename... Args_>
inline void PluginInfo_Dependencies::add_conflict_feature(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_conflict_feature(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:metadata.PluginInfo.Dependencies.conflict_feature)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PluginInfo_Dependencies::conflict_feature() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:metadata.PluginInfo.Dependencies.conflict_feature)
  return _internal_conflict_feature();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PluginInfo_Dependencies::mutable_conflict_feature() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:metadata.PluginInfo.Dependencies.conflict_feature)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_conflict_feature();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PluginInfo_Dependencies::_internal_conflict_feature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conflict_feature_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PluginInfo_Dependencies::_internal_mutable_conflict_feature() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.conflict_feature_;
}

// -------------------------------------------------------------------

// PluginInfo

// required sint32 pb_abi_version = 1;
inline bool PluginInfo::has_pb_abi_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void PluginInfo::clear_pb_abi_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pb_abi_version_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t PluginInfo::pb_abi_version() const {
  // @@protoc_insertion_point(field_get:metadata.PluginInfo.pb_abi_version)
  return _internal_pb_abi_version();
}
inline void PluginInfo::set_pb_abi_version(::int32_t value) {
  _internal_set_pb_abi_version(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:metadata.PluginInfo.pb_abi_version)
}
inline ::int32_t PluginInfo::_internal_pb_abi_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pb_abi_version_;
}
inline void PluginInfo::_internal_set_pb_abi_version(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pb_abi_version_ = value;
}

// required string locale = 2;
inline bool PluginInfo::has_locale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PluginInfo::clear_locale() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.locale_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PluginInfo::locale() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.PluginInfo.locale)
  return _internal_locale();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PluginInfo::set_locale(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.locale_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:metadata.PluginInfo.locale)
}
inline std::string* PluginInfo::mutable_locale() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_locale();
  // @@protoc_insertion_point(field_mutable:metadata.PluginInfo.locale)
  return _s;
}
inline const std::string& PluginInfo::_internal_locale() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.locale_.Get();
}
inline void PluginInfo::_internal_set_locale(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.locale_.Set(value, GetArena());
}
inline std::string* PluginInfo::_internal_mutable_locale() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.locale_.Mutable( GetArena());
}
inline std::string* PluginInfo::release_locale() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:metadata.PluginInfo.locale)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.locale_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.locale_.Set("", GetArena());
  }
  return released;
}
inline void PluginInfo::set_allocated_locale(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.locale_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.locale_.IsDefault()) {
    _impl_.locale_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:metadata.PluginInfo.locale)
}

// required uint64 time = 3;
inline bool PluginInfo::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void PluginInfo::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint64_t PluginInfo::time() const {
  // @@protoc_insertion_point(field_get:metadata.PluginInfo.time)
  return _internal_time();
}
inline void PluginInfo::set_time(::uint64_t value) {
  _internal_set_time(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:metadata.PluginInfo.time)
}
inline ::uint64_t PluginInfo::_internal_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_;
}
inline void PluginInfo::_internal_set_time(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_ = value;
}

// required bool brief_metadata = 4;
inline bool PluginInfo::has_brief_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void PluginInfo::clear_brief_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.brief_metadata_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool PluginInfo::brief_metadata() const {
  // @@protoc_insertion_point(field_get:metadata.PluginInfo.brief_metadata)
  return _internal_brief_metadata();
}
inline void PluginInfo::set_brief_metadata(bool value) {
  _internal_set_brief_metadata(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:metadata.PluginInfo.brief_metadata)
}
inline bool PluginInfo::_internal_brief_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.brief_metadata_;
}
inline void PluginInfo::_internal_set_brief_metadata(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.brief_metadata_ = value;
}

// required bool basic_metadata = 5;
inline bool PluginInfo::has_basic_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void PluginInfo::clear_basic_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.basic_metadata_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool PluginInfo::basic_metadata() const {
  // @@protoc_insertion_point(field_get:metadata.PluginInfo.basic_metadata)
  return _internal_basic_metadata();
}
inline void PluginInfo::set_basic_metadata(bool value) {
  _internal_set_basic_metadata(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:metadata.PluginInfo.basic_metadata)
}
inline bool PluginInfo::_internal_basic_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.basic_metadata_;
}
inline void PluginInfo::_internal_set_basic_metadata(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.basic_metadata_ = value;
}

// required string name = 6;
inline bool PluginInfo::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PluginInfo::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PluginInfo::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.PluginInfo.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PluginInfo::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:metadata.PluginInfo.name)
}
inline std::string* PluginInfo::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:metadata.PluginInfo.name)
  return _s;
}
inline const std::string& PluginInfo::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void PluginInfo::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* PluginInfo::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* PluginInfo::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:metadata.PluginInfo.name)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_.Set("", GetArena());
  }
  return released;
}
inline void PluginInfo::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:metadata.PluginInfo.name)
}

// optional string short_desc = 7;
inline bool PluginInfo::has_short_desc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PluginInfo::clear_short_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.short_desc_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PluginInfo::short_desc() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.PluginInfo.short_desc)
  return _internal_short_desc();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PluginInfo::set_short_desc(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.short_desc_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:metadata.PluginInfo.short_desc)
}
inline std::string* PluginInfo::mutable_short_desc() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_short_desc();
  // @@protoc_insertion_point(field_mutable:metadata.PluginInfo.short_desc)
  return _s;
}
inline const std::string& PluginInfo::_internal_short_desc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.short_desc_.Get();
}
inline void PluginInfo::_internal_set_short_desc(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.short_desc_.Set(value, GetArena());
}
inline std::string* PluginInfo::_internal_mutable_short_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.short_desc_.Mutable( GetArena());
}
inline std::string* PluginInfo::release_short_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:metadata.PluginInfo.short_desc)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.short_desc_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.short_desc_.Set("", GetArena());
  }
  return released;
}
inline void PluginInfo::set_allocated_short_desc(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.short_desc_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.short_desc_.IsDefault()) {
    _impl_.short_desc_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:metadata.PluginInfo.short_desc)
}

// optional string long_desc = 8;
inline bool PluginInfo::has_long_desc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void PluginInfo::clear_long_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.long_desc_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PluginInfo::long_desc() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.PluginInfo.long_desc)
  return _internal_long_desc();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PluginInfo::set_long_desc(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.long_desc_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:metadata.PluginInfo.long_desc)
}
inline std::string* PluginInfo::mutable_long_desc() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_long_desc();
  // @@protoc_insertion_point(field_mutable:metadata.PluginInfo.long_desc)
  return _s;
}
inline const std::string& PluginInfo::_internal_long_desc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.long_desc_.Get();
}
inline void PluginInfo::_internal_set_long_desc(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.long_desc_.Set(value, GetArena());
}
inline std::string* PluginInfo::_internal_mutable_long_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.long_desc_.Mutable( GetArena());
}
inline std::string* PluginInfo::release_long_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:metadata.PluginInfo.long_desc)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.long_desc_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.long_desc_.Set("", GetArena());
  }
  return released;
}
inline void PluginInfo::set_allocated_long_desc(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.long_desc_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.long_desc_.IsDefault()) {
    _impl_.long_desc_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:metadata.PluginInfo.long_desc)
}

// optional string category = 9;
inline bool PluginInfo::has_category() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void PluginInfo::clear_category() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.category_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& PluginInfo::category() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.PluginInfo.category)
  return _internal_category();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PluginInfo::set_category(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.category_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:metadata.PluginInfo.category)
}
inline std::string* PluginInfo::mutable_category() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_category();
  // @@protoc_insertion_point(field_mutable:metadata.PluginInfo.category)
  return _s;
}
inline const std::string& PluginInfo::_internal_category() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.category_.Get();
}
inline void PluginInfo::_internal_set_category(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.category_.Set(value, GetArena());
}
inline std::string* PluginInfo::_internal_mutable_category() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.category_.Mutable( GetArena());
}
inline std::string* PluginInfo::release_category() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:metadata.PluginInfo.category)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.category_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.category_.Set("", GetArena());
  }
  return released;
}
inline void PluginInfo::set_allocated_category(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.category_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.category_.IsDefault()) {
    _impl_.category_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:metadata.PluginInfo.category)
}

// repeated string feature = 10;
inline int PluginInfo::_internal_feature_size() const {
  return _internal_feature().size();
}
inline int PluginInfo::feature_size() const {
  return _internal_feature_size();
}
inline void PluginInfo::clear_feature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.feature_.Clear();
}
inline std::string* PluginInfo::add_feature() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_feature()->Add();
  // @@protoc_insertion_point(field_add_mutable:metadata.PluginInfo.feature)
  return _s;
}
inline const std::string& PluginInfo::feature(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.PluginInfo.feature)
  return _internal_feature().Get(index);
}
inline std::string* PluginInfo::mutable_feature(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:metadata.PluginInfo.feature)
  return _internal_mutable_feature()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void PluginInfo::set_feature(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_feature()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:metadata.PluginInfo.feature)
}
template <typename Arg_, typename... Args_>
inline void PluginInfo::add_feature(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_feature(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:metadata.PluginInfo.feature)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PluginInfo::feature() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:metadata.PluginInfo.feature)
  return _internal_feature();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PluginInfo::mutable_feature() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:metadata.PluginInfo.feature)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_feature();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PluginInfo::_internal_feature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.feature_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PluginInfo::_internal_mutable_feature() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.feature_;
}

// optional .metadata.PluginInfo.Dependencies deps = 11;
inline bool PluginInfo::has_deps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.deps_ != nullptr);
  return value;
}
inline void PluginInfo::clear_deps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.deps_ != nullptr) _impl_.deps_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::metadata::PluginInfo_Dependencies& PluginInfo::_internal_deps() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::metadata::PluginInfo_Dependencies* p = _impl_.deps_;
  return p != nullptr ? *p : reinterpret_cast<const ::metadata::PluginInfo_Dependencies&>(::metadata::_PluginInfo_Dependencies_default_instance_);
}
inline const ::metadata::PluginInfo_Dependencies& PluginInfo::deps() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.PluginInfo.deps)
  return _internal_deps();
}
inline void PluginInfo::unsafe_arena_set_allocated_deps(::metadata::PluginInfo_Dependencies* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.deps_);
  }
  _impl_.deps_ = reinterpret_cast<::metadata::PluginInfo_Dependencies*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metadata.PluginInfo.deps)
}
inline ::metadata::PluginInfo_Dependencies* PluginInfo::release_deps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::metadata::PluginInfo_Dependencies* released = _impl_.deps_;
  _impl_.deps_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::metadata::PluginInfo_Dependencies* PluginInfo::unsafe_arena_release_deps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:metadata.PluginInfo.deps)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::metadata::PluginInfo_Dependencies* temp = _impl_.deps_;
  _impl_.deps_ = nullptr;
  return temp;
}
inline ::metadata::PluginInfo_Dependencies* PluginInfo::_internal_mutable_deps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.deps_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::metadata::PluginInfo_Dependencies>(GetArena());
    _impl_.deps_ = reinterpret_cast<::metadata::PluginInfo_Dependencies*>(p);
  }
  return _impl_.deps_;
}
inline ::metadata::PluginInfo_Dependencies* PluginInfo::mutable_deps() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::metadata::PluginInfo_Dependencies* _msg = _internal_mutable_deps();
  // @@protoc_insertion_point(field_mutable:metadata.PluginInfo.deps)
  return _msg;
}
inline void PluginInfo::set_allocated_deps(::metadata::PluginInfo_Dependencies* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.deps_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.deps_ = reinterpret_cast<::metadata::PluginInfo_Dependencies*>(value);
  // @@protoc_insertion_point(field_set_allocated:metadata.PluginInfo.deps)
}

// -------------------------------------------------------------------

// PluginBrief

// required .metadata.PluginInfo info = 1;
inline bool PluginBrief::has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline void PluginBrief::clear_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::metadata::PluginInfo& PluginBrief::_internal_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::metadata::PluginInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::metadata::PluginInfo&>(::metadata::_PluginInfo_default_instance_);
}
inline const ::metadata::PluginInfo& PluginBrief::info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.PluginBrief.info)
  return _internal_info();
}
inline void PluginBrief::unsafe_arena_set_allocated_info(::metadata::PluginInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = reinterpret_cast<::metadata::PluginInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metadata.PluginBrief.info)
}
inline ::metadata::PluginInfo* PluginBrief::release_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::metadata::PluginInfo* released = _impl_.info_;
  _impl_.info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::metadata::PluginInfo* PluginBrief::unsafe_arena_release_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:metadata.PluginBrief.info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::metadata::PluginInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::metadata::PluginInfo* PluginBrief::_internal_mutable_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::metadata::PluginInfo>(GetArena());
    _impl_.info_ = reinterpret_cast<::metadata::PluginInfo*>(p);
  }
  return _impl_.info_;
}
inline ::metadata::PluginInfo* PluginBrief::mutable_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::metadata::PluginInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:metadata.PluginBrief.info)
  return _msg;
}
inline void PluginBrief::set_allocated_info(::metadata::PluginInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.info_ = reinterpret_cast<::metadata::PluginInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:metadata.PluginBrief.info)
}

// -------------------------------------------------------------------

// Plugin_Option_ColorValue

// optional string red = 1 [default = "0x0000"];
inline bool Plugin_Option_ColorValue::has_red() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Plugin_Option_ColorValue::clear_red() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.red_.ClearToDefault(::metadata::Plugin_Option_ColorValue::Impl_::_i_give_permission_to_break_this_code_default_red_, GetArena());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Plugin_Option_ColorValue::red() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.ColorValue.red)
  if (_impl_.red_.IsDefault()) {
    return Impl_::_i_give_permission_to_break_this_code_default_red_.get();
  }
  return _internal_red();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Plugin_Option_ColorValue::set_red(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.red_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.ColorValue.red)
}
inline std::string* Plugin_Option_ColorValue::mutable_red() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_red();
  // @@protoc_insertion_point(field_mutable:metadata.Plugin.Option.ColorValue.red)
  return _s;
}
inline const std::string& Plugin_Option_ColorValue::_internal_red() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.red_.Get();
}
inline void Plugin_Option_ColorValue::_internal_set_red(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.red_.Set(value, GetArena());
}
inline std::string* Plugin_Option_ColorValue::_internal_mutable_red() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.red_.Mutable(::metadata::Plugin_Option_ColorValue::Impl_::_i_give_permission_to_break_this_code_default_red_, GetArena());
}
inline std::string* Plugin_Option_ColorValue::release_red() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:metadata.Plugin.Option.ColorValue.red)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  return _impl_.red_.Release();
}
inline void Plugin_Option_ColorValue::set_allocated_red(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.red_.SetAllocated(value, GetArena());
  // @@protoc_insertion_point(field_set_allocated:metadata.Plugin.Option.ColorValue.red)
}

// optional string green = 2 [default = "0x0000"];
inline bool Plugin_Option_ColorValue::has_green() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Plugin_Option_ColorValue::clear_green() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.green_.ClearToDefault(::metadata::Plugin_Option_ColorValue::Impl_::_i_give_permission_to_break_this_code_default_green_, GetArena());
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Plugin_Option_ColorValue::green() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.ColorValue.green)
  if (_impl_.green_.IsDefault()) {
    return Impl_::_i_give_permission_to_break_this_code_default_green_.get();
  }
  return _internal_green();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Plugin_Option_ColorValue::set_green(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.green_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.ColorValue.green)
}
inline std::string* Plugin_Option_ColorValue::mutable_green() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_green();
  // @@protoc_insertion_point(field_mutable:metadata.Plugin.Option.ColorValue.green)
  return _s;
}
inline const std::string& Plugin_Option_ColorValue::_internal_green() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.green_.Get();
}
inline void Plugin_Option_ColorValue::_internal_set_green(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.green_.Set(value, GetArena());
}
inline std::string* Plugin_Option_ColorValue::_internal_mutable_green() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.green_.Mutable(::metadata::Plugin_Option_ColorValue::Impl_::_i_give_permission_to_break_this_code_default_green_, GetArena());
}
inline std::string* Plugin_Option_ColorValue::release_green() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:metadata.Plugin.Option.ColorValue.green)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  return _impl_.green_.Release();
}
inline void Plugin_Option_ColorValue::set_allocated_green(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.green_.SetAllocated(value, GetArena());
  // @@protoc_insertion_point(field_set_allocated:metadata.Plugin.Option.ColorValue.green)
}

// optional string blue = 3 [default = "0x0000"];
inline bool Plugin_Option_ColorValue::has_blue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Plugin_Option_ColorValue::clear_blue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.blue_.ClearToDefault(::metadata::Plugin_Option_ColorValue::Impl_::_i_give_permission_to_break_this_code_default_blue_, GetArena());
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Plugin_Option_ColorValue::blue() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.ColorValue.blue)
  if (_impl_.blue_.IsDefault()) {
    return Impl_::_i_give_permission_to_break_this_code_default_blue_.get();
  }
  return _internal_blue();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Plugin_Option_ColorValue::set_blue(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.blue_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.ColorValue.blue)
}
inline std::string* Plugin_Option_ColorValue::mutable_blue() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_blue();
  // @@protoc_insertion_point(field_mutable:metadata.Plugin.Option.ColorValue.blue)
  return _s;
}
inline const std::string& Plugin_Option_ColorValue::_internal_blue() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.blue_.Get();
}
inline void Plugin_Option_ColorValue::_internal_set_blue(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.blue_.Set(value, GetArena());
}
inline std::string* Plugin_Option_ColorValue::_internal_mutable_blue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.blue_.Mutable(::metadata::Plugin_Option_ColorValue::Impl_::_i_give_permission_to_break_this_code_default_blue_, GetArena());
}
inline std::string* Plugin_Option_ColorValue::release_blue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:metadata.Plugin.Option.ColorValue.blue)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  return _impl_.blue_.Release();
}
inline void Plugin_Option_ColorValue::set_allocated_blue(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.blue_.SetAllocated(value, GetArena());
  // @@protoc_insertion_point(field_set_allocated:metadata.Plugin.Option.ColorValue.blue)
}

// optional string alpha = 4 [default = "0xffff"];
inline bool Plugin_Option_ColorValue::has_alpha() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Plugin_Option_ColorValue::clear_alpha() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alpha_.ClearToDefault(::metadata::Plugin_Option_ColorValue::Impl_::_i_give_permission_to_break_this_code_default_alpha_, GetArena());
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Plugin_Option_ColorValue::alpha() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.ColorValue.alpha)
  if (_impl_.alpha_.IsDefault()) {
    return Impl_::_i_give_permission_to_break_this_code_default_alpha_.get();
  }
  return _internal_alpha();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Plugin_Option_ColorValue::set_alpha(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.alpha_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.ColorValue.alpha)
}
inline std::string* Plugin_Option_ColorValue::mutable_alpha() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_alpha();
  // @@protoc_insertion_point(field_mutable:metadata.Plugin.Option.ColorValue.alpha)
  return _s;
}
inline const std::string& Plugin_Option_ColorValue::_internal_alpha() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.alpha_.Get();
}
inline void Plugin_Option_ColorValue::_internal_set_alpha(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.alpha_.Set(value, GetArena());
}
inline std::string* Plugin_Option_ColorValue::_internal_mutable_alpha() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.alpha_.Mutable(::metadata::Plugin_Option_ColorValue::Impl_::_i_give_permission_to_break_this_code_default_alpha_, GetArena());
}
inline std::string* Plugin_Option_ColorValue::release_alpha() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:metadata.Plugin.Option.ColorValue.alpha)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  return _impl_.alpha_.Release();
}
inline void Plugin_Option_ColorValue::set_allocated_alpha(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.alpha_.SetAllocated(value, GetArena());
  // @@protoc_insertion_point(field_set_allocated:metadata.Plugin.Option.ColorValue.alpha)
}

// -------------------------------------------------------------------

// Plugin_Option_GenericValue

// optional bool bool_value = 1;
inline bool Plugin_Option_GenericValue::has_bool_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Plugin_Option_GenericValue::clear_bool_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bool_value_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool Plugin_Option_GenericValue::bool_value() const {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.GenericValue.bool_value)
  return _internal_bool_value();
}
inline void Plugin_Option_GenericValue::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.GenericValue.bool_value)
}
inline bool Plugin_Option_GenericValue::_internal_bool_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bool_value_;
}
inline void Plugin_Option_GenericValue::_internal_set_bool_value(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bool_value_ = value;
}

// optional sint32 int_value = 2;
inline bool Plugin_Option_GenericValue::has_int_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Plugin_Option_GenericValue::clear_int_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int_value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t Plugin_Option_GenericValue::int_value() const {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.GenericValue.int_value)
  return _internal_int_value();
}
inline void Plugin_Option_GenericValue::set_int_value(::int32_t value) {
  _internal_set_int_value(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.GenericValue.int_value)
}
inline ::int32_t Plugin_Option_GenericValue::_internal_int_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.int_value_;
}
inline void Plugin_Option_GenericValue::_internal_set_int_value(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int_value_ = value;
}

// optional float float_value = 3;
inline bool Plugin_Option_GenericValue::has_float_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Plugin_Option_GenericValue::clear_float_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.float_value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float Plugin_Option_GenericValue::float_value() const {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.GenericValue.float_value)
  return _internal_float_value();
}
inline void Plugin_Option_GenericValue::set_float_value(float value) {
  _internal_set_float_value(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.GenericValue.float_value)
}
inline float Plugin_Option_GenericValue::_internal_float_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.float_value_;
}
inline void Plugin_Option_GenericValue::_internal_set_float_value(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.float_value_ = value;
}

// optional .metadata.Plugin.Option.ColorValue color_value = 4;
inline bool Plugin_Option_GenericValue::has_color_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.color_value_ != nullptr);
  return value;
}
inline void Plugin_Option_GenericValue::clear_color_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.color_value_ != nullptr) _impl_.color_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::metadata::Plugin_Option_ColorValue& Plugin_Option_GenericValue::_internal_color_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::metadata::Plugin_Option_ColorValue* p = _impl_.color_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::metadata::Plugin_Option_ColorValue&>(::metadata::_Plugin_Option_ColorValue_default_instance_);
}
inline const ::metadata::Plugin_Option_ColorValue& Plugin_Option_GenericValue::color_value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.GenericValue.color_value)
  return _internal_color_value();
}
inline void Plugin_Option_GenericValue::unsafe_arena_set_allocated_color_value(::metadata::Plugin_Option_ColorValue* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.color_value_);
  }
  _impl_.color_value_ = reinterpret_cast<::metadata::Plugin_Option_ColorValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metadata.Plugin.Option.GenericValue.color_value)
}
inline ::metadata::Plugin_Option_ColorValue* Plugin_Option_GenericValue::release_color_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::metadata::Plugin_Option_ColorValue* released = _impl_.color_value_;
  _impl_.color_value_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::metadata::Plugin_Option_ColorValue* Plugin_Option_GenericValue::unsafe_arena_release_color_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:metadata.Plugin.Option.GenericValue.color_value)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::metadata::Plugin_Option_ColorValue* temp = _impl_.color_value_;
  _impl_.color_value_ = nullptr;
  return temp;
}
inline ::metadata::Plugin_Option_ColorValue* Plugin_Option_GenericValue::_internal_mutable_color_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.color_value_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::metadata::Plugin_Option_ColorValue>(GetArena());
    _impl_.color_value_ = reinterpret_cast<::metadata::Plugin_Option_ColorValue*>(p);
  }
  return _impl_.color_value_;
}
inline ::metadata::Plugin_Option_ColorValue* Plugin_Option_GenericValue::mutable_color_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::metadata::Plugin_Option_ColorValue* _msg = _internal_mutable_color_value();
  // @@protoc_insertion_point(field_mutable:metadata.Plugin.Option.GenericValue.color_value)
  return _msg;
}
inline void Plugin_Option_GenericValue::set_allocated_color_value(::metadata::Plugin_Option_ColorValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.color_value_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.color_value_ = reinterpret_cast<::metadata::Plugin_Option_ColorValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:metadata.Plugin.Option.GenericValue.color_value)
}

// optional uint32 edge_value = 5;
inline bool Plugin_Option_GenericValue::has_edge_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Plugin_Option_GenericValue::clear_edge_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.edge_value_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t Plugin_Option_GenericValue::edge_value() const {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.GenericValue.edge_value)
  return _internal_edge_value();
}
inline void Plugin_Option_GenericValue::set_edge_value(::uint32_t value) {
  _internal_set_edge_value(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.GenericValue.edge_value)
}
inline ::uint32_t Plugin_Option_GenericValue::_internal_edge_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.edge_value_;
}
inline void Plugin_Option_GenericValue::_internal_set_edge_value(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.edge_value_ = value;
}

// optional string string_value = 6;
inline bool Plugin_Option_GenericValue::has_string_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Plugin_Option_GenericValue::clear_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.string_value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Plugin_Option_GenericValue::string_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.GenericValue.string_value)
  return _internal_string_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Plugin_Option_GenericValue::set_string_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.string_value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.GenericValue.string_value)
}
inline std::string* Plugin_Option_GenericValue::mutable_string_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:metadata.Plugin.Option.GenericValue.string_value)
  return _s;
}
inline const std::string& Plugin_Option_GenericValue::_internal_string_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.string_value_.Get();
}
inline void Plugin_Option_GenericValue::_internal_set_string_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.string_value_.Set(value, GetArena());
}
inline std::string* Plugin_Option_GenericValue::_internal_mutable_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.string_value_.Mutable( GetArena());
}
inline std::string* Plugin_Option_GenericValue::release_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:metadata.Plugin.Option.GenericValue.string_value)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.string_value_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.string_value_.Set("", GetArena());
  }
  return released;
}
inline void Plugin_Option_GenericValue::set_allocated_string_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.string_value_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.string_value_.IsDefault()) {
    _impl_.string_value_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:metadata.Plugin.Option.GenericValue.string_value)
}

// -------------------------------------------------------------------

// Plugin_Option_IntDescription

// required sint32 value = 1;
inline bool Plugin_Option_IntDescription::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Plugin_Option_IntDescription::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Plugin_Option_IntDescription::value() const {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.IntDescription.value)
  return _internal_value();
}
inline void Plugin_Option_IntDescription::set_value(::int32_t value) {
  _internal_set_value(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.IntDescription.value)
}
inline ::int32_t Plugin_Option_IntDescription::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void Plugin_Option_IntDescription::_internal_set_value(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// required string name = 2;
inline bool Plugin_Option_IntDescription::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Plugin_Option_IntDescription::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Plugin_Option_IntDescription::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.IntDescription.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Plugin_Option_IntDescription::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.IntDescription.name)
}
inline std::string* Plugin_Option_IntDescription::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:metadata.Plugin.Option.IntDescription.name)
  return _s;
}
inline const std::string& Plugin_Option_IntDescription::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Plugin_Option_IntDescription::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Plugin_Option_IntDescription::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Plugin_Option_IntDescription::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:metadata.Plugin.Option.IntDescription.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_.Set("", GetArena());
  }
  return released;
}
inline void Plugin_Option_IntDescription::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:metadata.Plugin.Option.IntDescription.name)
}

// -------------------------------------------------------------------

// Plugin_Option_StringRestriction

// required string value = 1;
inline bool Plugin_Option_StringRestriction::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Plugin_Option_StringRestriction::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Plugin_Option_StringRestriction::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.StringRestriction.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Plugin_Option_StringRestriction::set_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.StringRestriction.value)
}
inline std::string* Plugin_Option_StringRestriction::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:metadata.Plugin.Option.StringRestriction.value)
  return _s;
}
inline const std::string& Plugin_Option_StringRestriction::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_.Get();
}
inline void Plugin_Option_StringRestriction::_internal_set_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.value_.Set(value, GetArena());
}
inline std::string* Plugin_Option_StringRestriction::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* Plugin_Option_StringRestriction::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:metadata.Plugin.Option.StringRestriction.value)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.value_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.value_.Set("", GetArena());
  }
  return released;
}
inline void Plugin_Option_StringRestriction::set_allocated_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.value_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:metadata.Plugin.Option.StringRestriction.value)
}

// required string name = 2;
inline bool Plugin_Option_StringRestriction::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Plugin_Option_StringRestriction::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Plugin_Option_StringRestriction::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.StringRestriction.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Plugin_Option_StringRestriction::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.StringRestriction.name)
}
inline std::string* Plugin_Option_StringRestriction::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:metadata.Plugin.Option.StringRestriction.name)
  return _s;
}
inline const std::string& Plugin_Option_StringRestriction::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Plugin_Option_StringRestriction::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Plugin_Option_StringRestriction::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Plugin_Option_StringRestriction::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:metadata.Plugin.Option.StringRestriction.name)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_.Set("", GetArena());
  }
  return released;
}
inline void Plugin_Option_StringRestriction::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:metadata.Plugin.Option.StringRestriction.name)
}

// -------------------------------------------------------------------

// Plugin_Option

// required string name = 1;
inline bool Plugin_Option::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Plugin_Option::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Plugin_Option::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Plugin_Option::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.name)
}
inline std::string* Plugin_Option::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:metadata.Plugin.Option.name)
  return _s;
}
inline const std::string& Plugin_Option::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Plugin_Option::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Plugin_Option::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Plugin_Option::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:metadata.Plugin.Option.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_.Set("", GetArena());
  }
  return released;
}
inline void Plugin_Option::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:metadata.Plugin.Option.name)
}

// required .metadata.Plugin.Option.Type type = 2;
inline bool Plugin_Option::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Plugin_Option::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::metadata::Plugin_Option_Type Plugin_Option::type() const {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.type)
  return _internal_type();
}
inline void Plugin_Option::set_type(::metadata::Plugin_Option_Type value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.type)
}
inline ::metadata::Plugin_Option_Type Plugin_Option::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::metadata::Plugin_Option_Type>(_impl_.type_);
}
inline void Plugin_Option::_internal_set_type(::metadata::Plugin_Option_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::metadata::Plugin_Option_Type_IsValid(value));
  _impl_.type_ = value;
}

// optional .metadata.Plugin.Option.Type list_type = 3;
inline bool Plugin_Option::has_list_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Plugin_Option::clear_list_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.list_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::metadata::Plugin_Option_Type Plugin_Option::list_type() const {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.list_type)
  return _internal_list_type();
}
inline void Plugin_Option::set_list_type(::metadata::Plugin_Option_Type value) {
  _internal_set_list_type(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.list_type)
}
inline ::metadata::Plugin_Option_Type Plugin_Option::_internal_list_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::metadata::Plugin_Option_Type>(_impl_.list_type_);
}
inline void Plugin_Option::_internal_set_list_type(::metadata::Plugin_Option_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::metadata::Plugin_Option_Type_IsValid(value));
  _impl_.list_type_ = value;
}

// optional string short_desc = 4;
inline bool Plugin_Option::has_short_desc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Plugin_Option::clear_short_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.short_desc_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Plugin_Option::short_desc() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.short_desc)
  return _internal_short_desc();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Plugin_Option::set_short_desc(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.short_desc_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.short_desc)
}
inline std::string* Plugin_Option::mutable_short_desc() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_short_desc();
  // @@protoc_insertion_point(field_mutable:metadata.Plugin.Option.short_desc)
  return _s;
}
inline const std::string& Plugin_Option::_internal_short_desc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.short_desc_.Get();
}
inline void Plugin_Option::_internal_set_short_desc(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.short_desc_.Set(value, GetArena());
}
inline std::string* Plugin_Option::_internal_mutable_short_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.short_desc_.Mutable( GetArena());
}
inline std::string* Plugin_Option::release_short_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:metadata.Plugin.Option.short_desc)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.short_desc_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.short_desc_.Set("", GetArena());
  }
  return released;
}
inline void Plugin_Option::set_allocated_short_desc(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.short_desc_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.short_desc_.IsDefault()) {
    _impl_.short_desc_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:metadata.Plugin.Option.short_desc)
}

// optional string long_desc = 5;
inline bool Plugin_Option::has_long_desc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Plugin_Option::clear_long_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.long_desc_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Plugin_Option::long_desc() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.long_desc)
  return _internal_long_desc();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Plugin_Option::set_long_desc(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.long_desc_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.long_desc)
}
inline std::string* Plugin_Option::mutable_long_desc() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_long_desc();
  // @@protoc_insertion_point(field_mutable:metadata.Plugin.Option.long_desc)
  return _s;
}
inline const std::string& Plugin_Option::_internal_long_desc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.long_desc_.Get();
}
inline void Plugin_Option::_internal_set_long_desc(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.long_desc_.Set(value, GetArena());
}
inline std::string* Plugin_Option::_internal_mutable_long_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.long_desc_.Mutable( GetArena());
}
inline std::string* Plugin_Option::release_long_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:metadata.Plugin.Option.long_desc)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.long_desc_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.long_desc_.Set("", GetArena());
  }
  return released;
}
inline void Plugin_Option::set_allocated_long_desc(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.long_desc_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.long_desc_.IsDefault()) {
    _impl_.long_desc_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:metadata.Plugin.Option.long_desc)
}

// optional sint32 group_id = 6 [default = -1];
inline bool Plugin_Option::has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void Plugin_Option::clear_group_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::int32_t Plugin_Option::group_id() const {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.group_id)
  return _internal_group_id();
}
inline void Plugin_Option::set_group_id(::int32_t value) {
  _internal_set_group_id(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.group_id)
}
inline ::int32_t Plugin_Option::_internal_group_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_id_;
}
inline void Plugin_Option::_internal_set_group_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_id_ = value;
}

// optional sint32 subgroup_id = 7 [default = -1];
inline bool Plugin_Option::has_subgroup_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void Plugin_Option::clear_subgroup_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subgroup_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::int32_t Plugin_Option::subgroup_id() const {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.subgroup_id)
  return _internal_subgroup_id();
}
inline void Plugin_Option::set_subgroup_id(::int32_t value) {
  _internal_set_subgroup_id(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.subgroup_id)
}
inline ::int32_t Plugin_Option::_internal_subgroup_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subgroup_id_;
}
inline void Plugin_Option::_internal_set_subgroup_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subgroup_id_ = value;
}

// optional bool read_only = 8;
inline bool Plugin_Option::has_read_only() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Plugin_Option::clear_read_only() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.read_only_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool Plugin_Option::read_only() const {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.read_only)
  return _internal_read_only();
}
inline void Plugin_Option::set_read_only(bool value) {
  _internal_set_read_only(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.read_only)
}
inline bool Plugin_Option::_internal_read_only() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.read_only_;
}
inline void Plugin_Option::_internal_set_read_only(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.read_only_ = value;
}

// optional bool extensible = 9;
inline bool Plugin_Option::has_extensible() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Plugin_Option::clear_extensible() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extensible_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool Plugin_Option::extensible() const {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.extensible)
  return _internal_extensible();
}
inline void Plugin_Option::set_extensible(bool value) {
  _internal_set_extensible(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.extensible)
}
inline bool Plugin_Option::_internal_extensible() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.extensible_;
}
inline void Plugin_Option::_internal_set_extensible(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extensible_ = value;
}

// optional sint32 sort_start = 10 [default = -1];
inline bool Plugin_Option::has_sort_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void Plugin_Option::clear_sort_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sort_start_ = -1;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::int32_t Plugin_Option::sort_start() const {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.sort_start)
  return _internal_sort_start();
}
inline void Plugin_Option::set_sort_start(::int32_t value) {
  _internal_set_sort_start(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.sort_start)
}
inline ::int32_t Plugin_Option::_internal_sort_start() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sort_start_;
}
inline void Plugin_Option::_internal_set_sort_start(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sort_start_ = value;
}

// repeated .metadata.Plugin.Option.GenericValue default_value = 11;
inline int Plugin_Option::_internal_default_value_size() const {
  return _internal_default_value().size();
}
inline int Plugin_Option::default_value_size() const {
  return _internal_default_value_size();
}
inline void Plugin_Option::clear_default_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default_value_.Clear();
}
inline ::metadata::Plugin_Option_GenericValue* Plugin_Option::mutable_default_value(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:metadata.Plugin.Option.default_value)
  return _internal_mutable_default_value()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_GenericValue>* Plugin_Option::mutable_default_value()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:metadata.Plugin.Option.default_value)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_default_value();
}
inline const ::metadata::Plugin_Option_GenericValue& Plugin_Option::default_value(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.default_value)
  return _internal_default_value().Get(index);
}
inline ::metadata::Plugin_Option_GenericValue* Plugin_Option::add_default_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::metadata::Plugin_Option_GenericValue* _add = _internal_mutable_default_value()->Add();
  // @@protoc_insertion_point(field_add:metadata.Plugin.Option.default_value)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_GenericValue>& Plugin_Option::default_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:metadata.Plugin.Option.default_value)
  return _internal_default_value();
}
inline const ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_GenericValue>&
Plugin_Option::_internal_default_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.default_value_;
}
inline ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_GenericValue>*
Plugin_Option::_internal_mutable_default_value() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.default_value_;
}

// optional sint32 int_min = 12;
inline bool Plugin_Option::has_int_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Plugin_Option::clear_int_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int_min_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t Plugin_Option::int_min() const {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.int_min)
  return _internal_int_min();
}
inline void Plugin_Option::set_int_min(::int32_t value) {
  _internal_set_int_min(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.int_min)
}
inline ::int32_t Plugin_Option::_internal_int_min() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.int_min_;
}
inline void Plugin_Option::_internal_set_int_min(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int_min_ = value;
}

// optional sint32 int_max = 13;
inline bool Plugin_Option::has_int_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Plugin_Option::clear_int_max() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int_max_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t Plugin_Option::int_max() const {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.int_max)
  return _internal_int_max();
}
inline void Plugin_Option::set_int_max(::int32_t value) {
  _internal_set_int_max(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.int_max)
}
inline ::int32_t Plugin_Option::_internal_int_max() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.int_max_;
}
inline void Plugin_Option::_internal_set_int_max(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int_max_ = value;
}

// repeated .metadata.Plugin.Option.IntDescription int_desc = 14;
inline int Plugin_Option::_internal_int_desc_size() const {
  return _internal_int_desc().size();
}
inline int Plugin_Option::int_desc_size() const {
  return _internal_int_desc_size();
}
inline void Plugin_Option::clear_int_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int_desc_.Clear();
}
inline ::metadata::Plugin_Option_IntDescription* Plugin_Option::mutable_int_desc(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:metadata.Plugin.Option.int_desc)
  return _internal_mutable_int_desc()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_IntDescription>* Plugin_Option::mutable_int_desc()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:metadata.Plugin.Option.int_desc)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_int_desc();
}
inline const ::metadata::Plugin_Option_IntDescription& Plugin_Option::int_desc(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.int_desc)
  return _internal_int_desc().Get(index);
}
inline ::metadata::Plugin_Option_IntDescription* Plugin_Option::add_int_desc() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::metadata::Plugin_Option_IntDescription* _add = _internal_mutable_int_desc()->Add();
  // @@protoc_insertion_point(field_add:metadata.Plugin.Option.int_desc)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_IntDescription>& Plugin_Option::int_desc() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:metadata.Plugin.Option.int_desc)
  return _internal_int_desc();
}
inline const ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_IntDescription>&
Plugin_Option::_internal_int_desc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.int_desc_;
}
inline ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_IntDescription>*
Plugin_Option::_internal_mutable_int_desc() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.int_desc_;
}

// optional float float_min = 15;
inline bool Plugin_Option::has_float_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Plugin_Option::clear_float_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.float_min_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float Plugin_Option::float_min() const {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.float_min)
  return _internal_float_min();
}
inline void Plugin_Option::set_float_min(float value) {
  _internal_set_float_min(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.float_min)
}
inline float Plugin_Option::_internal_float_min() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.float_min_;
}
inline void Plugin_Option::_internal_set_float_min(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.float_min_ = value;
}

// optional float float_max = 16;
inline bool Plugin_Option::has_float_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Plugin_Option::clear_float_max() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.float_max_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline float Plugin_Option::float_max() const {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.float_max)
  return _internal_float_max();
}
inline void Plugin_Option::set_float_max(float value) {
  _internal_set_float_max(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.float_max)
}
inline float Plugin_Option::_internal_float_max() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.float_max_;
}
inline void Plugin_Option::_internal_set_float_max(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.float_max_ = value;
}

// optional float precision = 17;
inline bool Plugin_Option::has_precision() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Plugin_Option::clear_precision() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.precision_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline float Plugin_Option::precision() const {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.precision)
  return _internal_precision();
}
inline void Plugin_Option::set_precision(float value) {
  _internal_set_precision(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.precision)
}
inline float Plugin_Option::_internal_precision() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.precision_;
}
inline void Plugin_Option::_internal_set_precision(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.precision_ = value;
}

// repeated .metadata.Plugin.Option.StringRestriction str_restriction = 18;
inline int Plugin_Option::_internal_str_restriction_size() const {
  return _internal_str_restriction().size();
}
inline int Plugin_Option::str_restriction_size() const {
  return _internal_str_restriction_size();
}
inline void Plugin_Option::clear_str_restriction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.str_restriction_.Clear();
}
inline ::metadata::Plugin_Option_StringRestriction* Plugin_Option::mutable_str_restriction(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:metadata.Plugin.Option.str_restriction)
  return _internal_mutable_str_restriction()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_StringRestriction>* Plugin_Option::mutable_str_restriction()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:metadata.Plugin.Option.str_restriction)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_str_restriction();
}
inline const ::metadata::Plugin_Option_StringRestriction& Plugin_Option::str_restriction(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.str_restriction)
  return _internal_str_restriction().Get(index);
}
inline ::metadata::Plugin_Option_StringRestriction* Plugin_Option::add_str_restriction() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::metadata::Plugin_Option_StringRestriction* _add = _internal_mutable_str_restriction()->Add();
  // @@protoc_insertion_point(field_add:metadata.Plugin.Option.str_restriction)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_StringRestriction>& Plugin_Option::str_restriction() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:metadata.Plugin.Option.str_restriction)
  return _internal_str_restriction();
}
inline const ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_StringRestriction>&
Plugin_Option::_internal_str_restriction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.str_restriction_;
}
inline ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_StringRestriction>*
Plugin_Option::_internal_mutable_str_restriction() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.str_restriction_;
}

// optional string hints = 19;
inline bool Plugin_Option::has_hints() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Plugin_Option::clear_hints() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hints_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Plugin_Option::hints() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.hints)
  return _internal_hints();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Plugin_Option::set_hints(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.hints_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.hints)
}
inline std::string* Plugin_Option::mutable_hints() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hints();
  // @@protoc_insertion_point(field_mutable:metadata.Plugin.Option.hints)
  return _s;
}
inline const std::string& Plugin_Option::_internal_hints() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hints_.Get();
}
inline void Plugin_Option::_internal_set_hints(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.hints_.Set(value, GetArena());
}
inline std::string* Plugin_Option::_internal_mutable_hints() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.hints_.Mutable( GetArena());
}
inline std::string* Plugin_Option::release_hints() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:metadata.Plugin.Option.hints)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.hints_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.hints_.Set("", GetArena());
  }
  return released;
}
inline void Plugin_Option::set_allocated_hints(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.hints_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hints_.IsDefault()) {
    _impl_.hints_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:metadata.Plugin.Option.hints)
}

// optional bool passive_grab = 20;
inline bool Plugin_Option::has_passive_grab() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Plugin_Option::clear_passive_grab() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.passive_grab_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool Plugin_Option::passive_grab() const {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.passive_grab)
  return _internal_passive_grab();
}
inline void Plugin_Option::set_passive_grab(bool value) {
  _internal_set_passive_grab(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.passive_grab)
}
inline bool Plugin_Option::_internal_passive_grab() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.passive_grab_;
}
inline void Plugin_Option::_internal_set_passive_grab(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.passive_grab_ = value;
}

// optional bool internal = 21;
inline bool Plugin_Option::has_internal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Plugin_Option::clear_internal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.internal_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool Plugin_Option::internal() const {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.internal)
  return _internal_internal();
}
inline void Plugin_Option::set_internal(bool value) {
  _internal_set_internal(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.internal)
}
inline bool Plugin_Option::_internal_internal() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.internal_;
}
inline void Plugin_Option::_internal_set_internal(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.internal_ = value;
}

// optional bool nodelay = 22;
inline bool Plugin_Option::has_nodelay() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void Plugin_Option::clear_nodelay() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nodelay_ = false;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool Plugin_Option::nodelay() const {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Option.nodelay)
  return _internal_nodelay();
}
inline void Plugin_Option::set_nodelay(bool value) {
  _internal_set_nodelay(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:metadata.Plugin.Option.nodelay)
}
inline bool Plugin_Option::_internal_nodelay() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nodelay_;
}
inline void Plugin_Option::_internal_set_nodelay(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nodelay_ = value;
}

// -------------------------------------------------------------------

// Plugin_Extension

// required string base_plugin = 1;
inline bool Plugin_Extension::has_base_plugin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Plugin_Extension::clear_base_plugin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_plugin_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Plugin_Extension::base_plugin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Extension.base_plugin)
  return _internal_base_plugin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Plugin_Extension::set_base_plugin(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.base_plugin_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:metadata.Plugin.Extension.base_plugin)
}
inline std::string* Plugin_Extension::mutable_base_plugin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_base_plugin();
  // @@protoc_insertion_point(field_mutable:metadata.Plugin.Extension.base_plugin)
  return _s;
}
inline const std::string& Plugin_Extension::_internal_base_plugin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.base_plugin_.Get();
}
inline void Plugin_Extension::_internal_set_base_plugin(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.base_plugin_.Set(value, GetArena());
}
inline std::string* Plugin_Extension::_internal_mutable_base_plugin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.base_plugin_.Mutable( GetArena());
}
inline std::string* Plugin_Extension::release_base_plugin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:metadata.Plugin.Extension.base_plugin)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.base_plugin_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.base_plugin_.Set("", GetArena());
  }
  return released;
}
inline void Plugin_Extension::set_allocated_base_plugin(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_plugin_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.base_plugin_.IsDefault()) {
    _impl_.base_plugin_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:metadata.Plugin.Extension.base_plugin)
}

// repeated string base_option = 2;
inline int Plugin_Extension::_internal_base_option_size() const {
  return _internal_base_option().size();
}
inline int Plugin_Extension::base_option_size() const {
  return _internal_base_option_size();
}
inline void Plugin_Extension::clear_base_option() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_option_.Clear();
}
inline std::string* Plugin_Extension::add_base_option() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_base_option()->Add();
  // @@protoc_insertion_point(field_add_mutable:metadata.Plugin.Extension.base_option)
  return _s;
}
inline const std::string& Plugin_Extension::base_option(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Extension.base_option)
  return _internal_base_option().Get(index);
}
inline std::string* Plugin_Extension::mutable_base_option(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:metadata.Plugin.Extension.base_option)
  return _internal_mutable_base_option()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void Plugin_Extension::set_base_option(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_base_option()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:metadata.Plugin.Extension.base_option)
}
template <typename Arg_, typename... Args_>
inline void Plugin_Extension::add_base_option(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_base_option(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:metadata.Plugin.Extension.base_option)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Plugin_Extension::base_option() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:metadata.Plugin.Extension.base_option)
  return _internal_base_option();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Plugin_Extension::mutable_base_option() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:metadata.Plugin.Extension.base_option)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_base_option();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Plugin_Extension::_internal_base_option() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.base_option_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Plugin_Extension::_internal_mutable_base_option() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.base_option_;
}

// repeated .metadata.Plugin.Option.StringRestriction str_restriction = 3;
inline int Plugin_Extension::_internal_str_restriction_size() const {
  return _internal_str_restriction().size();
}
inline int Plugin_Extension::str_restriction_size() const {
  return _internal_str_restriction_size();
}
inline void Plugin_Extension::clear_str_restriction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.str_restriction_.Clear();
}
inline ::metadata::Plugin_Option_StringRestriction* Plugin_Extension::mutable_str_restriction(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:metadata.Plugin.Extension.str_restriction)
  return _internal_mutable_str_restriction()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_StringRestriction>* Plugin_Extension::mutable_str_restriction()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:metadata.Plugin.Extension.str_restriction)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_str_restriction();
}
inline const ::metadata::Plugin_Option_StringRestriction& Plugin_Extension::str_restriction(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Extension.str_restriction)
  return _internal_str_restriction().Get(index);
}
inline ::metadata::Plugin_Option_StringRestriction* Plugin_Extension::add_str_restriction() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::metadata::Plugin_Option_StringRestriction* _add = _internal_mutable_str_restriction()->Add();
  // @@protoc_insertion_point(field_add:metadata.Plugin.Extension.str_restriction)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_StringRestriction>& Plugin_Extension::str_restriction() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:metadata.Plugin.Extension.str_restriction)
  return _internal_str_restriction();
}
inline const ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_StringRestriction>&
Plugin_Extension::_internal_str_restriction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.str_restriction_;
}
inline ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option_StringRestriction>*
Plugin_Extension::_internal_mutable_str_restriction() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.str_restriction_;
}

// -------------------------------------------------------------------

// Plugin_Screen

// repeated .metadata.Plugin.Option option = 1;
inline int Plugin_Screen::_internal_option_size() const {
  return _internal_option().size();
}
inline int Plugin_Screen::option_size() const {
  return _internal_option_size();
}
inline void Plugin_Screen::clear_option() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.option_.Clear();
}
inline ::metadata::Plugin_Option* Plugin_Screen::mutable_option(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:metadata.Plugin.Screen.option)
  return _internal_mutable_option()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option>* Plugin_Screen::mutable_option()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:metadata.Plugin.Screen.option)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_option();
}
inline const ::metadata::Plugin_Option& Plugin_Screen::option(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Screen.option)
  return _internal_option().Get(index);
}
inline ::metadata::Plugin_Option* Plugin_Screen::add_option() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::metadata::Plugin_Option* _add = _internal_mutable_option()->Add();
  // @@protoc_insertion_point(field_add:metadata.Plugin.Screen.option)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option>& Plugin_Screen::option() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:metadata.Plugin.Screen.option)
  return _internal_option();
}
inline const ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option>&
Plugin_Screen::_internal_option() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.option_;
}
inline ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Option>*
Plugin_Screen::_internal_mutable_option() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.option_;
}

// repeated string group_desc = 2;
inline int Plugin_Screen::_internal_group_desc_size() const {
  return _internal_group_desc().size();
}
inline int Plugin_Screen::group_desc_size() const {
  return _internal_group_desc_size();
}
inline void Plugin_Screen::clear_group_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_desc_.Clear();
}
inline std::string* Plugin_Screen::add_group_desc() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_group_desc()->Add();
  // @@protoc_insertion_point(field_add_mutable:metadata.Plugin.Screen.group_desc)
  return _s;
}
inline const std::string& Plugin_Screen::group_desc(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Screen.group_desc)
  return _internal_group_desc().Get(index);
}
inline std::string* Plugin_Screen::mutable_group_desc(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:metadata.Plugin.Screen.group_desc)
  return _internal_mutable_group_desc()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void Plugin_Screen::set_group_desc(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_group_desc()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:metadata.Plugin.Screen.group_desc)
}
template <typename Arg_, typename... Args_>
inline void Plugin_Screen::add_group_desc(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_group_desc(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:metadata.Plugin.Screen.group_desc)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Plugin_Screen::group_desc() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:metadata.Plugin.Screen.group_desc)
  return _internal_group_desc();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Plugin_Screen::mutable_group_desc() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:metadata.Plugin.Screen.group_desc)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_group_desc();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Plugin_Screen::_internal_group_desc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_desc_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Plugin_Screen::_internal_mutable_group_desc() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.group_desc_;
}

// repeated string subgroup_desc = 3;
inline int Plugin_Screen::_internal_subgroup_desc_size() const {
  return _internal_subgroup_desc().size();
}
inline int Plugin_Screen::subgroup_desc_size() const {
  return _internal_subgroup_desc_size();
}
inline void Plugin_Screen::clear_subgroup_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subgroup_desc_.Clear();
}
inline std::string* Plugin_Screen::add_subgroup_desc() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_subgroup_desc()->Add();
  // @@protoc_insertion_point(field_add_mutable:metadata.Plugin.Screen.subgroup_desc)
  return _s;
}
inline const std::string& Plugin_Screen::subgroup_desc(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.Plugin.Screen.subgroup_desc)
  return _internal_subgroup_desc().Get(index);
}
inline std::string* Plugin_Screen::mutable_subgroup_desc(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:metadata.Plugin.Screen.subgroup_desc)
  return _internal_mutable_subgroup_desc()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void Plugin_Screen::set_subgroup_desc(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_subgroup_desc()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:metadata.Plugin.Screen.subgroup_desc)
}
template <typename Arg_, typename... Args_>
inline void Plugin_Screen::add_subgroup_desc(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_subgroup_desc(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:metadata.Plugin.Screen.subgroup_desc)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Plugin_Screen::subgroup_desc() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:metadata.Plugin.Screen.subgroup_desc)
  return _internal_subgroup_desc();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Plugin_Screen::mutable_subgroup_desc() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:metadata.Plugin.Screen.subgroup_desc)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_subgroup_desc();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Plugin_Screen::_internal_subgroup_desc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subgroup_desc_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Plugin_Screen::_internal_mutable_subgroup_desc() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.subgroup_desc_;
}

// -------------------------------------------------------------------

// Plugin

// required .metadata.PluginInfo info = 1;
inline bool Plugin::has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline void Plugin::clear_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::metadata::PluginInfo& Plugin::_internal_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::metadata::PluginInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::metadata::PluginInfo&>(::metadata::_PluginInfo_default_instance_);
}
inline const ::metadata::PluginInfo& Plugin::info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.Plugin.info)
  return _internal_info();
}
inline void Plugin::unsafe_arena_set_allocated_info(::metadata::PluginInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = reinterpret_cast<::metadata::PluginInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metadata.Plugin.info)
}
inline ::metadata::PluginInfo* Plugin::release_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::metadata::PluginInfo* released = _impl_.info_;
  _impl_.info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::metadata::PluginInfo* Plugin::unsafe_arena_release_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:metadata.Plugin.info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::metadata::PluginInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::metadata::PluginInfo* Plugin::_internal_mutable_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::metadata::PluginInfo>(GetArena());
    _impl_.info_ = reinterpret_cast<::metadata::PluginInfo*>(p);
  }
  return _impl_.info_;
}
inline ::metadata::PluginInfo* Plugin::mutable_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::metadata::PluginInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:metadata.Plugin.info)
  return _msg;
}
inline void Plugin::set_allocated_info(::metadata::PluginInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.info_ = reinterpret_cast<::metadata::PluginInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:metadata.Plugin.info)
}

// optional .metadata.Plugin.Screen screen = 2;
inline bool Plugin::has_screen() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.screen_ != nullptr);
  return value;
}
inline void Plugin::clear_screen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.screen_ != nullptr) _impl_.screen_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::metadata::Plugin_Screen& Plugin::_internal_screen() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::metadata::Plugin_Screen* p = _impl_.screen_;
  return p != nullptr ? *p : reinterpret_cast<const ::metadata::Plugin_Screen&>(::metadata::_Plugin_Screen_default_instance_);
}
inline const ::metadata::Plugin_Screen& Plugin::screen() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.Plugin.screen)
  return _internal_screen();
}
inline void Plugin::unsafe_arena_set_allocated_screen(::metadata::Plugin_Screen* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.screen_);
  }
  _impl_.screen_ = reinterpret_cast<::metadata::Plugin_Screen*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:metadata.Plugin.screen)
}
inline ::metadata::Plugin_Screen* Plugin::release_screen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::metadata::Plugin_Screen* released = _impl_.screen_;
  _impl_.screen_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::metadata::Plugin_Screen* Plugin::unsafe_arena_release_screen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:metadata.Plugin.screen)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::metadata::Plugin_Screen* temp = _impl_.screen_;
  _impl_.screen_ = nullptr;
  return temp;
}
inline ::metadata::Plugin_Screen* Plugin::_internal_mutable_screen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.screen_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::metadata::Plugin_Screen>(GetArena());
    _impl_.screen_ = reinterpret_cast<::metadata::Plugin_Screen*>(p);
  }
  return _impl_.screen_;
}
inline ::metadata::Plugin_Screen* Plugin::mutable_screen() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::metadata::Plugin_Screen* _msg = _internal_mutable_screen();
  // @@protoc_insertion_point(field_mutable:metadata.Plugin.screen)
  return _msg;
}
inline void Plugin::set_allocated_screen(::metadata::Plugin_Screen* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.screen_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.screen_ = reinterpret_cast<::metadata::Plugin_Screen*>(value);
  // @@protoc_insertion_point(field_set_allocated:metadata.Plugin.screen)
}

// repeated .metadata.Plugin.Extension extension = 3;
inline int Plugin::_internal_extension_size() const {
  return _internal_extension().size();
}
inline int Plugin::extension_size() const {
  return _internal_extension_size();
}
inline void Plugin::clear_extension() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extension_.Clear();
}
inline ::metadata::Plugin_Extension* Plugin::mutable_extension(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:metadata.Plugin.extension)
  return _internal_mutable_extension()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Extension>* Plugin::mutable_extension()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:metadata.Plugin.extension)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_extension();
}
inline const ::metadata::Plugin_Extension& Plugin::extension(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:metadata.Plugin.extension)
  return _internal_extension().Get(index);
}
inline ::metadata::Plugin_Extension* Plugin::add_extension() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::metadata::Plugin_Extension* _add = _internal_mutable_extension()->Add();
  // @@protoc_insertion_point(field_add:metadata.Plugin.extension)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Extension>& Plugin::extension() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:metadata.Plugin.extension)
  return _internal_extension();
}
inline const ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Extension>&
Plugin::_internal_extension() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.extension_;
}
inline ::google::protobuf::RepeatedPtrField<::metadata::Plugin_Extension>*
Plugin::_internal_mutable_extension() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.extension_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace metadata


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::metadata::Plugin_Option_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::metadata::Plugin_Option_Type>() {
  return ::metadata::Plugin_Option_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // compizconfig_2eproto_2epb_2eh
